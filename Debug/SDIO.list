
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c0c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005da0  08005da0  00006da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb0  08005eb0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005eb0  08005eb0  00006eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb8  08005eb8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb8  08005eb8  00006eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ebc  08005ebc  00006ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005ec0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  2000000c  08005ecc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08005ecc  00007558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcfe  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233e  00000000  00000000  00012d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00015078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000892  00000000  00000000  00015bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176b5  00000000  00000000  00016482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe9b  00000000  00000000  0002db37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089396  00000000  00000000  0003d9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6d68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d8c  00000000  00000000  000c6dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c9b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005d88 	.word	0x08005d88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08005d88 	.word	0x08005d88

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96a 	b.w	80004d0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	460c      	mov	r4, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14e      	bne.n	80002be <__udivmoddi4+0xaa>
 8000220:	4694      	mov	ip, r2
 8000222:	458c      	cmp	ip, r1
 8000224:	4686      	mov	lr, r0
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	d962      	bls.n	80002f2 <__udivmoddi4+0xde>
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0320 	rsb	r3, r2, #32
 8000232:	4091      	lsls	r1, r2
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	fa0c fc02 	lsl.w	ip, ip, r2
 800023c:	4319      	orrs	r1, r3
 800023e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000242:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000246:	fa1f f68c 	uxth.w	r6, ip
 800024a:	fbb1 f4f7 	udiv	r4, r1, r7
 800024e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000252:	fb07 1114 	mls	r1, r7, r4, r1
 8000256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025a:	fb04 f106 	mul.w	r1, r4, r6
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f104 30ff 	add.w	r0, r4, #4294967295
 800026a:	f080 8112 	bcs.w	8000492 <__udivmoddi4+0x27e>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 810f 	bls.w	8000492 <__udivmoddi4+0x27e>
 8000274:	3c02      	subs	r4, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a59      	subs	r1, r3, r1
 800027a:	fa1f f38e 	uxth.w	r3, lr
 800027e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000282:	fb07 1110 	mls	r1, r7, r0, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb00 f606 	mul.w	r6, r0, r6
 800028e:	429e      	cmp	r6, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f100 31ff 	add.w	r1, r0, #4294967295
 800029a:	f080 80fc 	bcs.w	8000496 <__udivmoddi4+0x282>
 800029e:	429e      	cmp	r6, r3
 80002a0:	f240 80f9 	bls.w	8000496 <__udivmoddi4+0x282>
 80002a4:	4463      	add	r3, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	1b9b      	subs	r3, r3, r6
 80002aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa6>
 80002b2:	40d3      	lsrs	r3, r2
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xba>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb4>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa6>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x150>
 80002d6:	42a3      	cmp	r3, r4
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xcc>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f0c0 80f0 	bcc.w	80004c0 <__udivmoddi4+0x2ac>
 80002e0:	1a86      	subs	r6, r0, r2
 80002e2:	eb64 0303 	sbc.w	r3, r4, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	d0e6      	beq.n	80002ba <__udivmoddi4+0xa6>
 80002ec:	e9c5 6300 	strd	r6, r3, [r5]
 80002f0:	e7e3      	b.n	80002ba <__udivmoddi4+0xa6>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x204>
 80002f8:	eba1 040c 	sub.w	r4, r1, ip
 80002fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000300:	fa1f f78c 	uxth.w	r7, ip
 8000304:	2101      	movs	r1, #1
 8000306:	fbb4 f6f8 	udiv	r6, r4, r8
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb08 4416 	mls	r4, r8, r6, r4
 8000312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000316:	fb07 f006 	mul.w	r0, r7, r6
 800031a:	4298      	cmp	r0, r3
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x11c>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 34ff 	add.w	r4, r6, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x11a>
 8000328:	4298      	cmp	r0, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 800032e:	4626      	mov	r6, r4
 8000330:	1a1c      	subs	r4, r3, r0
 8000332:	fa1f f38e 	uxth.w	r3, lr
 8000336:	fbb4 f0f8 	udiv	r0, r4, r8
 800033a:	fb08 4410 	mls	r4, r8, r0, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb00 f707 	mul.w	r7, r0, r7
 8000346:	429f      	cmp	r7, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x148>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x146>
 8000354:	429f      	cmp	r7, r3
 8000356:	f200 80b0 	bhi.w	80004ba <__udivmoddi4+0x2a6>
 800035a:	4620      	mov	r0, r4
 800035c:	1bdb      	subs	r3, r3, r7
 800035e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x9c>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa20 fc06 	lsr.w	ip, r0, r6
 8000374:	fa04 f301 	lsl.w	r3, r4, r1
 8000378:	ea43 030c 	orr.w	r3, r3, ip
 800037c:	40f4      	lsrs	r4, r6
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	0c38      	lsrs	r0, r7, #16
 8000384:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000388:	fbb4 fef0 	udiv	lr, r4, r0
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	fb00 441e 	mls	r4, r0, lr, r4
 8000394:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000398:	fb0e f90c 	mul.w	r9, lr, ip
 800039c:	45a1      	cmp	r9, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d90a      	bls.n	80003ba <__udivmoddi4+0x1a6>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003aa:	f080 8084 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8081 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80003b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b8:	443c      	add	r4, r7
 80003ba:	eba4 0409 	sub.w	r4, r4, r9
 80003be:	fa1f f983 	uxth.w	r9, r3
 80003c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1d2>
 80003d6:	193c      	adds	r4, r7, r4
 80003d8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003dc:	d267      	bcs.n	80004ae <__udivmoddi4+0x29a>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d965      	bls.n	80004ae <__udivmoddi4+0x29a>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ea:	fba0 9302 	umull	r9, r3, r0, r2
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	429c      	cmp	r4, r3
 80003f4:	46ce      	mov	lr, r9
 80003f6:	469c      	mov	ip, r3
 80003f8:	d351      	bcc.n	800049e <__udivmoddi4+0x28a>
 80003fa:	d04e      	beq.n	800049a <__udivmoddi4+0x286>
 80003fc:	b155      	cbz	r5, 8000414 <__udivmoddi4+0x200>
 80003fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000402:	eb64 040c 	sbc.w	r4, r4, ip
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	40cb      	lsrs	r3, r1
 800040c:	431e      	orrs	r6, r3
 800040e:	40cc      	lsrs	r4, r1
 8000410:	e9c5 6400 	strd	r6, r4, [r5]
 8000414:	2100      	movs	r1, #0
 8000416:	e750      	b.n	80002ba <__udivmoddi4+0xa6>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f103 	lsr.w	r1, r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa24 f303 	lsr.w	r3, r4, r3
 8000428:	4094      	lsls	r4, r2
 800042a:	430c      	orrs	r4, r1
 800042c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000430:	fa00 fe02 	lsl.w	lr, r0, r2
 8000434:	fa1f f78c 	uxth.w	r7, ip
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3110 	mls	r1, r8, r0, r3
 8000440:	0c23      	lsrs	r3, r4, #16
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f107 	mul.w	r1, r0, r7
 800044a:	4299      	cmp	r1, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x24c>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 36ff 	add.w	r6, r0, #4294967295
 8000456:	d22c      	bcs.n	80004b2 <__udivmoddi4+0x29e>
 8000458:	4299      	cmp	r1, r3
 800045a:	d92a      	bls.n	80004b2 <__udivmoddi4+0x29e>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb3 f1f8 	udiv	r1, r3, r8
 8000468:	fb08 3311 	mls	r3, r8, r1, r3
 800046c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000470:	fb01 f307 	mul.w	r3, r1, r7
 8000474:	42a3      	cmp	r3, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x276>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000480:	d213      	bcs.n	80004aa <__udivmoddi4+0x296>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d911      	bls.n	80004aa <__udivmoddi4+0x296>
 8000486:	3902      	subs	r1, #2
 8000488:	4464      	add	r4, ip
 800048a:	1ae4      	subs	r4, r4, r3
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	e739      	b.n	8000306 <__udivmoddi4+0xf2>
 8000492:	4604      	mov	r4, r0
 8000494:	e6f0      	b.n	8000278 <__udivmoddi4+0x64>
 8000496:	4608      	mov	r0, r1
 8000498:	e706      	b.n	80002a8 <__udivmoddi4+0x94>
 800049a:	45c8      	cmp	r8, r9
 800049c:	d2ae      	bcs.n	80003fc <__udivmoddi4+0x1e8>
 800049e:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7a8      	b.n	80003fc <__udivmoddi4+0x1e8>
 80004aa:	4631      	mov	r1, r6
 80004ac:	e7ed      	b.n	800048a <__udivmoddi4+0x276>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e799      	b.n	80003e6 <__udivmoddi4+0x1d2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	e7d4      	b.n	8000460 <__udivmoddi4+0x24c>
 80004b6:	46d6      	mov	lr, sl
 80004b8:	e77f      	b.n	80003ba <__udivmoddi4+0x1a6>
 80004ba:	4463      	add	r3, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e74d      	b.n	800035c <__udivmoddi4+0x148>
 80004c0:	4606      	mov	r6, r0
 80004c2:	4623      	mov	r3, r4
 80004c4:	4608      	mov	r0, r1
 80004c6:	e70f      	b.n	80002e8 <__udivmoddi4+0xd4>
 80004c8:	3e02      	subs	r6, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	e730      	b.n	8000330 <__udivmoddi4+0x11c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fa4f 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f859 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8e5 	bl	80006b0 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80004e6:	f000 f8c1 	bl	800066c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004ea:	f003 f831 	bl	8003550 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  res = f_mount(&fs, "", 0); // Mount the file system (default drive)
 80004ee:	2200      	movs	r2, #0
 80004f0:	4922      	ldr	r1, [pc, #136]	@ (800057c <main+0xa8>)
 80004f2:	4823      	ldr	r0, [pc, #140]	@ (8000580 <main+0xac>)
 80004f4:	f004 ffa2 	bl	800543c <f_mount>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <main+0xb0>)
 80004fe:	701a      	strb	r2, [r3, #0]
      if (res != FR_OK) {
 8000500:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <main+0xb0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <main+0x38>
          Error_Handler(); // If mount fails, go to error handler
 8000508:	f000 f91c 	bl	8000744 <Error_Handler>
      }

      // Create and open a new file called "test.txt"
      res = f_open(&file, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800050c:	220a      	movs	r2, #10
 800050e:	491e      	ldr	r1, [pc, #120]	@ (8000588 <main+0xb4>)
 8000510:	481e      	ldr	r0, [pc, #120]	@ (800058c <main+0xb8>)
 8000512:	f004 ffd9 	bl	80054c8 <f_open>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <main+0xb0>)
 800051c:	701a      	strb	r2, [r3, #0]
      if (res != FR_OK) {
 800051e:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <main+0xb0>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <main+0x56>
          Error_Handler(); // If file open fails, go to error handler
 8000526:	f000 f90d 	bl	8000744 <Error_Handler>
      }

      // Write a string to the file
      const char *text = "Hello, STM32 World!\n";
 800052a:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <main+0xbc>)
 800052c:	607b      	str	r3, [r7, #4]
      unsigned int bytesWritten;
      res = f_write(&file, text, strlen(text), &bytesWritten);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff fe50 	bl	80001d4 <strlen>
 8000534:	4602      	mov	r2, r0
 8000536:	463b      	mov	r3, r7
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	4814      	ldr	r0, [pc, #80]	@ (800058c <main+0xb8>)
 800053c:	f005 f97e 	bl	800583c <f_write>
 8000540:	4603      	mov	r3, r0
 8000542:	461a      	mov	r2, r3
 8000544:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <main+0xb0>)
 8000546:	701a      	strb	r2, [r3, #0]
      if (res != FR_OK) {
 8000548:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <main+0xb0>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <main+0x80>
          Error_Handler(); // If write fails, go to error handler
 8000550:	f000 f8f8 	bl	8000744 <Error_Handler>
      }

      // Close the file
      res = f_close(&file);
 8000554:	480d      	ldr	r0, [pc, #52]	@ (800058c <main+0xb8>)
 8000556:	f005 fb64 	bl	8005c22 <f_close>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <main+0xb0>)
 8000560:	701a      	strb	r2, [r3, #0]
      if (res != FR_OK) {
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <main+0xb0>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <main+0x9a>
          Error_Handler(); // If file close fails, go to error handler
 800056a:	f000 f8eb 	bl	8000744 <Error_Handler>
      }

      // Optionally, unmount the file system
      f_mount(NULL, "", 0);
 800056e:	2200      	movs	r2, #0
 8000570:	4902      	ldr	r1, [pc, #8]	@ (800057c <main+0xa8>)
 8000572:	2000      	movs	r0, #0
 8000574:	f004 ff62 	bl	800543c <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0xa4>
 800057c:	08005da0 	.word	0x08005da0
 8000580:	20000028 	.word	0x20000028
 8000584:	20000488 	.word	0x20000488
 8000588:	08005da4 	.word	0x08005da4
 800058c:	20000258 	.word	0x20000258
 8000590:	08005db0 	.word	0x08005db0

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	@ 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 fbc3 	bl	8005d2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a28      	ldr	r2, [pc, #160]	@ (8000664 <SystemClock_Config+0xd0>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <SystemClock_Config+0xd4>)
 80005e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000608:	2310      	movs	r3, #16
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fd70 	bl	8001104 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800062a:	f000 f88b 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f000 ffd2 	bl	80015f4 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000656:	f000 f875 	bl	8000744 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	@ 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <MX_SDIO_SD_Init+0x3c>)
 8000672:	4a0e      	ldr	r2, [pc, #56]	@ (80006ac <MX_SDIO_SD_Init+0x40>)
 8000674:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_SDIO_SD_Init+0x3c>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800067c:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <MX_SDIO_SD_Init+0x3c>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_SDIO_SD_Init+0x3c>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <MX_SDIO_SD_Init+0x3c>)
 800068a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <MX_SDIO_SD_Init+0x3c>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000696:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <MX_SDIO_SD_Init+0x3c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	2000048c 	.word	0x2000048c
 80006ac:	40012c00 	.word	0x40012c00

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_GPIO_Init+0x8c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <MX_GPIO_Init+0x8c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_GPIO_Init+0x8c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_GPIO_Init+0x8c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <MX_GPIO_Init+0x8c>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_GPIO_Init+0x8c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_GPIO_Init+0x8c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <MX_GPIO_Init+0x8c>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_GPIO_Init+0x8c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_GPIO_Init+0x90>)
 800072e:	f000 fb33 	bl	8000d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    // Blink an LED, or output an error to a serial terminal to signal failure
    while (1) {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Assuming an LED is connected to PA5
 8000748:	2120      	movs	r1, #32
 800074a:	4804      	ldr	r0, [pc, #16]	@ (800075c <Error_Handler+0x18>)
 800074c:	f000 fcc0 	bl	80010d0 <HAL_GPIO_TogglePin>
        HAL_Delay(500);  // 500ms delay
 8000750:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000754:	f000 f984 	bl	8000a60 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Assuming an LED is connected to PA5
 8000758:	bf00      	nop
 800075a:	e7f5      	b.n	8000748 <Error_Handler+0x4>
 800075c:	40020000 	.word	0x40020000

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	4a0f      	ldr	r2, [pc, #60]	@ (80007ac <HAL_MspInit+0x4c>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000774:	6453      	str	r3, [r2, #68]	@ 0x44
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <HAL_MspInit+0x4c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	@ 0x40
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a31      	ldr	r2, [pc, #196]	@ (8000894 <HAL_SD_MspInit+0xe4>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d15b      	bne.n	800088a <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <HAL_SD_MspInit+0xe8>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <HAL_SD_MspInit+0xe8>)
 80007dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <HAL_SD_MspInit+0xe8>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <HAL_SD_MspInit+0xe8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a28      	ldr	r2, [pc, #160]	@ (8000898 <HAL_SD_MspInit+0xe8>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <HAL_SD_MspInit+0xe8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <HAL_SD_MspInit+0xe8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <HAL_SD_MspInit+0xe8>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <HAL_SD_MspInit+0xe8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000826:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000838:	230c      	movs	r3, #12
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4816      	ldr	r0, [pc, #88]	@ (800089c <HAL_SD_MspInit+0xec>)
 8000844:	f000 faa8 	bl	8000d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000848:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800084c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800085a:	230c      	movs	r3, #12
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	480d      	ldr	r0, [pc, #52]	@ (800089c <HAL_SD_MspInit+0xec>)
 8000866:	f000 fa97 	bl	8000d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800086a:	2304      	movs	r3, #4
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800087a:	230c      	movs	r3, #12
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <HAL_SD_MspInit+0xf0>)
 8000886:	f000 fa87 	bl	8000d98 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40012c00 	.word	0x40012c00
 8000898:	40023800 	.word	0x40023800
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020c00 	.word	0x40020c00

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <NMI_Handler+0x4>

080008ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <MemManage_Handler+0x4>

080008bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <UsageFault_Handler+0x4>

080008cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f000 f891 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000960 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	@ (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	@ (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000956:	f005 f9f3 	bl	8005d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fdbb 	bl	80004d4 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000960:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800096c:	08005ec0 	.word	0x08005ec0
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000974:	20000558 	.word	0x20000558

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <HAL_Init+0x40>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800098a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_Init+0x40>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	@ (80009bc <HAL_Init+0x40>)
 800099e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f931 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fed6 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f93b 	bl	8000c5a <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 f911 	bl	8000c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	@ (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000510 	.word	0x20000510

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000510 	.word	0x20000510

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff ffee 	bl	8000a48 <HAL_GetTick>
 8000a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a78:	d005      	beq.n	8000a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <HAL_Delay+0x44>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a86:	bf00      	nop
 8000a88:	f7ff ffde 	bl	8000a48 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d8f7      	bhi.n	8000a88 <HAL_Delay+0x28>
  {
  }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008

08000aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <__NVIC_GetPriorityGrouping+0x18>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	f003 0307 	and.w	r3, r3, #7
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	@ (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	@ (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	@ 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	@ 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd8:	d301      	bcc.n	8000bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00f      	b.n	8000bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <SysTick_Config+0x40>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be6:	210f      	movs	r1, #15
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f7ff ff8e 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <SysTick_Config+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf6:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <SysTick_Config+0x40>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff47 	bl	8000aa8 <__NVIC_SetPriorityGrouping>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c34:	f7ff ff5c 	bl	8000af0 <__NVIC_GetPriorityGrouping>
 8000c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff ff8e 	bl	8000b60 <NVIC_EncodePriority>
 8000c44:	4602      	mov	r2, r0
 8000c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff5d 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffb0 	bl	8000bc8 <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c88:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d101      	bne.n	8000c98 <HAL_DMA_Start_IT+0x26>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e040      	b.n	8000d1a <HAL_DMA_Start_IT+0xa8>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d12f      	bne.n	8000d0c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	68b9      	ldr	r1, [r7, #8]
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f83a 	bl	8000d3a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cca:	223f      	movs	r2, #63	@ 0x3f
 8000ccc:	409a      	lsls	r2, r3
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f042 0216 	orr.w	r2, r2, #22
 8000ce0:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f042 0208 	orr.w	r2, r2, #8
 8000cf8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f042 0201 	orr.w	r2, r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e005      	b.n	8000d18 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000d14:	2302      	movs	r3, #2
 8000d16:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b085      	sub	sp, #20
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000d56:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b40      	cmp	r3, #64	@ 0x40
 8000d66:	d108      	bne.n	8000d7a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d78:	e007      	b.n	8000d8a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	60da      	str	r2, [r3, #12]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	@ 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	e159      	b.n	8001068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f040 8148 	bne.w	8001062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d005      	beq.n	8000dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d130      	bne.n	8000e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	f003 0201 	and.w	r2, r3, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d017      	beq.n	8000e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d123      	bne.n	8000edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	69b9      	ldr	r1, [r7, #24]
 8000ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0203 	and.w	r2, r3, #3
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80a2 	beq.w	8001062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b57      	ldr	r3, [pc, #348]	@ (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	4a56      	ldr	r2, [pc, #344]	@ (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2e:	4b54      	ldr	r3, [pc, #336]	@ (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3a:	4a52      	ldr	r2, [pc, #328]	@ (8001084 <HAL_GPIO_Init+0x2ec>)
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a49      	ldr	r2, [pc, #292]	@ (8001088 <HAL_GPIO_Init+0x2f0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x202>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a48      	ldr	r2, [pc, #288]	@ (800108c <HAL_GPIO_Init+0x2f4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x1fe>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a47      	ldr	r2, [pc, #284]	@ (8001090 <HAL_GPIO_Init+0x2f8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a46      	ldr	r2, [pc, #280]	@ (8001094 <HAL_GPIO_Init+0x2fc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x1f6>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a45      	ldr	r2, [pc, #276]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x1f2>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	@ (8001084 <HAL_GPIO_Init+0x2ec>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b38      	ldr	r3, [pc, #224]	@ (800109c <HAL_GPIO_Init+0x304>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fde:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <HAL_GPIO_Init+0x304>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <HAL_GPIO_Init+0x304>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001008:	4a24      	ldr	r2, [pc, #144]	@ (800109c <HAL_GPIO_Init+0x304>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100e:	4b23      	ldr	r3, [pc, #140]	@ (800109c <HAL_GPIO_Init+0x304>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001032:	4a1a      	ldr	r2, [pc, #104]	@ (800109c <HAL_GPIO_Init+0x304>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <HAL_GPIO_Init+0x304>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105c:	4a0f      	ldr	r2, [pc, #60]	@ (800109c <HAL_GPIO_Init+0x304>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f67f aea2 	bls.w	8000db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40013800 	.word	0x40013800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40013c00 	.word	0x40013c00

080010a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e001      	b.n	80010c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43d9      	mvns	r1, r3
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	400b      	ands	r3, r1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e267      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d075      	beq.n	800120e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001122:	4b88      	ldr	r3, [pc, #544]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b04      	cmp	r3, #4
 800112c:	d00c      	beq.n	8001148 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112e:	4b85      	ldr	r3, [pc, #532]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001136:	2b08      	cmp	r3, #8
 8001138:	d112      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	4b82      	ldr	r3, [pc, #520]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001146:	d10b      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	4b7e      	ldr	r3, [pc, #504]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d05b      	beq.n	800120c <HAL_RCC_OscConfig+0x108>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d157      	bne.n	800120c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e242      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001168:	d106      	bne.n	8001178 <HAL_RCC_OscConfig+0x74>
 800116a:	4b76      	ldr	r3, [pc, #472]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a75      	ldr	r2, [pc, #468]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e01d      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0x98>
 8001182:	4b70      	ldr	r3, [pc, #448]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6f      	ldr	r2, [pc, #444]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b6d      	ldr	r3, [pc, #436]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a6c      	ldr	r2, [pc, #432]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 800119c:	4b69      	ldr	r3, [pc, #420]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a68      	ldr	r2, [pc, #416]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b66      	ldr	r3, [pc, #408]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a65      	ldr	r2, [pc, #404]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc44 	bl	8000a48 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fc40 	bl	8000a48 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	@ 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e207      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xc0>
 80011e2:	e014      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc30 	bl	8000a48 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fc2c 	bl	8000a48 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	@ 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e1f3      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	4b51      	ldr	r3, [pc, #324]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0xe8>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d063      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800121a:	4b4a      	ldr	r3, [pc, #296]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001226:	4b47      	ldr	r3, [pc, #284]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800122e:	2b08      	cmp	r3, #8
 8001230:	d11c      	bne.n	800126c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	4b44      	ldr	r3, [pc, #272]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d116      	bne.n	800126c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	4b41      	ldr	r3, [pc, #260]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_RCC_OscConfig+0x152>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e1c7      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	4b3b      	ldr	r3, [pc, #236]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4937      	ldr	r1, [pc, #220]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	e03a      	b.n	80012e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d020      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001274:	4b34      	ldr	r3, [pc, #208]	@ (8001348 <HAL_RCC_OscConfig+0x244>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff fbe5 	bl	8000a48 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff fbe1 	bl	8000a48 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e1a8      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4925      	ldr	r1, [pc, #148]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <HAL_RCC_OscConfig+0x244>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fbc4 	bl	8000a48 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fbc0 	bl	8000a48 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e187      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d036      	beq.n	800135c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d016      	beq.n	8001324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <HAL_RCC_OscConfig+0x248>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff fba4 	bl	8000a48 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff fba0 	bl	8000a48 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e167      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x200>
 8001322:	e01b      	b.n	800135c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_RCC_OscConfig+0x248>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb8d 	bl	8000a48 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	e00e      	b.n	8001350 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fb89 	bl	8000a48 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d907      	bls.n	8001350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e150      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
 8001344:	40023800 	.word	0x40023800
 8001348:	42470000 	.word	0x42470000
 800134c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b88      	ldr	r3, [pc, #544]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ea      	bne.n	8001332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 8097 	beq.w	8001498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b81      	ldr	r3, [pc, #516]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b7d      	ldr	r3, [pc, #500]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	4a7c      	ldr	r2, [pc, #496]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	@ 0x40
 800138a:	4b7a      	ldr	r3, [pc, #488]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b77      	ldr	r3, [pc, #476]	@ (8001578 <HAL_RCC_OscConfig+0x474>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b74      	ldr	r3, [pc, #464]	@ (8001578 <HAL_RCC_OscConfig+0x474>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a73      	ldr	r2, [pc, #460]	@ (8001578 <HAL_RCC_OscConfig+0x474>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb49 	bl	8000a48 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fb45 	bl	8000a48 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e10c      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001578 <HAL_RCC_OscConfig+0x474>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x2ea>
 80013e0:	4b64      	ldr	r3, [pc, #400]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e4:	4a63      	ldr	r2, [pc, #396]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x324>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x30c>
 80013f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6713      	str	r3, [r2, #112]	@ 0x70
 8001402:	4b5c      	ldr	r3, [pc, #368]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001406:	4a5b      	ldr	r2, [pc, #364]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6713      	str	r3, [r2, #112]	@ 0x70
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x324>
 8001410:	4b58      	ldr	r3, [pc, #352]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001414:	4a57      	ldr	r2, [pc, #348]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6713      	str	r3, [r2, #112]	@ 0x70
 800141c:	4b55      	ldr	r3, [pc, #340]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001420:	4a54      	ldr	r2, [pc, #336]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001422:	f023 0304 	bic.w	r3, r3, #4
 8001426:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d015      	beq.n	800145c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fb0a 	bl	8000a48 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	e00a      	b.n	800144e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7ff fb06 	bl	8000a48 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0cb      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144e:	4b49      	ldr	r3, [pc, #292]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0ee      	beq.n	8001438 <HAL_RCC_OscConfig+0x334>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff faf4 	bl	8000a48 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff faf0 	bl	8000a48 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e0b5      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147a:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ee      	bne.n	8001464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a38      	ldr	r2, [pc, #224]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a1 	beq.w	80015e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014a2:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d05c      	beq.n	8001568 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d141      	bne.n	800153a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b31      	ldr	r3, [pc, #196]	@ (800157c <HAL_RCC_OscConfig+0x478>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fac4 	bl	8000a48 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fac0 	bl	8000a48 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e087      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	3b01      	subs	r3, #1
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	491b      	ldr	r1, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_RCC_OscConfig+0x478>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fa99 	bl	8000a48 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fa95 	bl	8000a48 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e05c      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x416>
 8001538:	e054      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_RCC_OscConfig+0x478>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fa82 	bl	8000a48 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fa7e 	bl	8000a48 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e045      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x444>
 8001566:	e03d      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e038      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000
 800157c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_RCC_OscConfig+0x4ec>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d028      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d121      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d11a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015b0:	4013      	ands	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d111      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	085b      	lsrs	r3, r3, #1
 80015c8:	3b01      	subs	r3, #1
 80015ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800

080015f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0cc      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001608:	4b68      	ldr	r3, [pc, #416]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d90c      	bls.n	8001630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b65      	ldr	r3, [pc, #404]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b63      	ldr	r3, [pc, #396]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0b8      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001648:	4b59      	ldr	r3, [pc, #356]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a58      	ldr	r2, [pc, #352]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001652:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001660:	4b53      	ldr	r3, [pc, #332]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4a52      	ldr	r2, [pc, #328]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800166a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166c:	4b50      	ldr	r3, [pc, #320]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	494d      	ldr	r1, [pc, #308]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d044      	beq.n	8001714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b47      	ldr	r3, [pc, #284]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d119      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e07f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	4b3f      	ldr	r3, [pc, #252]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e06f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	4b3b      	ldr	r3, [pc, #236]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e067      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d2:	4b37      	ldr	r3, [pc, #220]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f023 0203 	bic.w	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4934      	ldr	r1, [pc, #208]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e4:	f7ff f9b0 	bl	8000a48 <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ec:	f7ff f9ac 	bl	8000a48 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e04f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 020c 	and.w	r2, r3, #12
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	429a      	cmp	r2, r3
 8001712:	d1eb      	bne.n	80016ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001714:	4b25      	ldr	r3, [pc, #148]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d20c      	bcs.n	800173c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e032      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001748:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4916      	ldr	r1, [pc, #88]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001766:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	490e      	ldr	r1, [pc, #56]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800177a:	f000 f821 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 800177e:	4602      	mov	r2, r0
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	490a      	ldr	r1, [pc, #40]	@ (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	5ccb      	ldrb	r3, [r1, r3]
 800178e:	fa22 f303 	lsr.w	r3, r2, r3
 8001792:	4a09      	ldr	r2, [pc, #36]	@ (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_RCC_ClockConfig+0x1c8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f910 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08005e0c 	.word	0x08005e0c
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c4:	b090      	sub	sp, #64	@ 0x40
 80017c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d8:	4b59      	ldr	r3, [pc, #356]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d00d      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x40>
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	f200 80a1 	bhi.w	800192c <HAL_RCC_GetSysClockFreq+0x16c>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x34>
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0x3a>
 80017f2:	e09b      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x184>)
 80017f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017f8:	e09b      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017fa:	4b53      	ldr	r3, [pc, #332]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x188>)
 80017fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017fe:	e098      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001800:	4b4f      	ldr	r3, [pc, #316]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001808:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800180a:	4b4d      	ldr	r3, [pc, #308]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d028      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001816:	4b4a      	ldr	r3, [pc, #296]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	2200      	movs	r2, #0
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	627a      	str	r2, [r7, #36]	@ 0x24
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001828:	2100      	movs	r1, #0
 800182a:	4b47      	ldr	r3, [pc, #284]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x188>)
 800182c:	fb03 f201 	mul.w	r2, r3, r1
 8001830:	2300      	movs	r3, #0
 8001832:	fb00 f303 	mul.w	r3, r0, r3
 8001836:	4413      	add	r3, r2
 8001838:	4a43      	ldr	r2, [pc, #268]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x188>)
 800183a:	fba0 1202 	umull	r1, r2, r0, r2
 800183e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001840:	460a      	mov	r2, r1
 8001842:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001846:	4413      	add	r3, r2
 8001848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800184a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800184c:	2200      	movs	r2, #0
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	61fa      	str	r2, [r7, #28]
 8001852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001856:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800185a:	f7fe fcc3 	bl	80001e4 <__aeabi_uldivmod>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4613      	mov	r3, r2
 8001864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001866:	e053      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001868:	4b35      	ldr	r3, [pc, #212]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	2200      	movs	r2, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	617a      	str	r2, [r7, #20]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800187a:	f04f 0b00 	mov.w	fp, #0
 800187e:	4652      	mov	r2, sl
 8001880:	465b      	mov	r3, fp
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	0159      	lsls	r1, r3, #5
 800188c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001890:	0150      	lsls	r0, r2, #5
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	ebb2 080a 	subs.w	r8, r2, sl
 800189a:	eb63 090b 	sbc.w	r9, r3, fp
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018b2:	ebb2 0408 	subs.w	r4, r2, r8
 80018b6:	eb63 0509 	sbc.w	r5, r3, r9
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	00eb      	lsls	r3, r5, #3
 80018c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c8:	00e2      	lsls	r2, r4, #3
 80018ca:	4614      	mov	r4, r2
 80018cc:	461d      	mov	r5, r3
 80018ce:	eb14 030a 	adds.w	r3, r4, sl
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	eb45 030b 	adc.w	r3, r5, fp
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018fa:	2200      	movs	r2, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	60fa      	str	r2, [r7, #12]
 8001900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001904:	f7fe fc6e 	bl	80001e4 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4613      	mov	r3, r2
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	0c1b      	lsrs	r3, r3, #16
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	3301      	adds	r3, #1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001920:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800192a:	e002      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x184>)
 800192e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001934:	4618      	mov	r0, r3
 8001936:	3740      	adds	r7, #64	@ 0x40
 8001938:	46bd      	mov	sp, r7
 800193a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00f42400 	.word	0x00f42400
 8001948:	017d7840 	.word	0x017d7840

0800194c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e022      	b.n	80019a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7fe ff1d 	bl	80007b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2203      	movs	r2, #3
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f814 	bl	80019ac <HAL_SD_InitCard>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00a      	b.n	80019a4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	b08e      	sub	sp, #56	@ 0x38
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80019c8:	2376      	movs	r3, #118	@ 0x76
 80019ca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681d      	ldr	r5, [r3, #0]
 80019d0:	466c      	mov	r4, sp
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e4:	4628      	mov	r0, r5
 80019e6:	f001 f851 	bl	8002a8c <SDIO_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80019f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e04f      	b.n	8001a9c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80019fc:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <HAL_SD_InitCard+0xf8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 f878 	bl	8002afc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001a0c:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <HAL_SD_InitCard+0xf8>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f7ff f824 	bl	8000a60 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fe11 	bl	8002640 <SD_PowerON>
 8001a1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e02e      	b.n	8001a9c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fd30 	bl	80024a4 <SD_InitCard>
 8001a44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00b      	beq.n	8001a64 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e01b      	b.n	8001a9c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 f8d7 	bl	8002c20 <SDMMC_CmdBlockLength>
 8001a72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00f      	beq.n	8001a9a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <HAL_SD_InitCard+0xfc>)
 8001a80:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3728      	adds	r7, #40	@ 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa4:	422580a0 	.word	0x422580a0
 8001aa8:	004005ff 	.word	0x004005ff

08001aac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	@ 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0c0      	b.n	8001c56 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	f040 80b9 	bne.w	8001c54 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	441a      	add	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d907      	bls.n	8001b06 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0a7      	b.n	8001c56 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2203      	movs	r2, #3
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a4c      	ldr	r2, [pc, #304]	@ (8001c60 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8001b30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	4a4b      	ldr	r2, [pc, #300]	@ (8001c64 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8001b38:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	2200      	movs	r2, #0
 8001b40:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3380      	adds	r3, #128	@ 0x80
 8001b70:	4619      	mov	r1, r3
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	f7ff f87a 	bl	8000c72 <HAL_DMA_Start_IT>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d017      	beq.n	8001bb4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8001b92:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a33      	ldr	r2, [pc, #204]	@ (8001c68 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8001b9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e050      	b.n	8001c56 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c6c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d002      	beq.n	8001bc8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8001bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	025b      	lsls	r3, r3, #9
 8001bd2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001bd4:	2390      	movs	r3, #144	@ 0x90
 8001bd6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f107 0210 	add.w	r2, r7, #16
 8001bec:	4611      	mov	r1, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 ffea 	bl	8002bc8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d90a      	bls.n	8001c10 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2282      	movs	r2, #130	@ 0x82
 8001bfe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 f84e 	bl	8002ca8 <SDMMC_CmdReadMultiBlock>
 8001c0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001c0e:	e009      	b.n	8001c24 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2281      	movs	r2, #129	@ 0x81
 8001c14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 f821 	bl	8002c64 <SDMMC_CmdReadSingleBlock>
 8001c22:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8001c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d012      	beq.n	8001c50 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c68 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8001c30:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e002      	b.n	8001c56 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3730      	adds	r7, #48	@ 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	0800238f 	.word	0x0800238f
 8001c64:	08002401 	.word	0x08002401
 8001c68:	004005ff 	.word	0x004005ff
 8001c6c:	4225858c 	.word	0x4225858c

08001c70 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	@ 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0c5      	b.n	8001e24 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	f040 80be 	bne.w	8001e22 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001cac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d907      	bls.n	8001cca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cbe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0ac      	b.n	8001e24 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf2:	4a4e      	ldr	r2, [pc, #312]	@ (8001e2c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8001cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfa:	4a4d      	ldr	r2, [pc, #308]	@ (8001e30 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8001cfc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d02:	2200      	movs	r2, #0
 8001d04:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d002      	beq.n	8001d14 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8001d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d10:	025b      	lsls	r3, r3, #9
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d90a      	bls.n	8001d30 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	22a0      	movs	r2, #160	@ 0xa0
 8001d1e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 f802 	bl	8002d30 <SDMMC_CmdWriteMultiBlock>
 8001d2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001d2e:	e009      	b.n	8001d44 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2290      	movs	r2, #144	@ 0x90
 8001d34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 ffd5 	bl	8002cec <SDMMC_CmdWriteSingleBlock>
 8001d42:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d012      	beq.n	8001d70 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a39      	ldr	r2, [pc, #228]	@ (8001e34 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8001d50:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e059      	b.n	8001e24 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8001d70:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7a:	2240      	movs	r2, #64	@ 0x40
 8001d7c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3380      	adds	r3, #128	@ 0x80
 8001da6:	461a      	mov	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	025b      	lsls	r3, r3, #9
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	f7fe ff60 	bl	8000c72 <HAL_DMA_Start_IT>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d01c      	beq.n	8001df2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8001dc6:	f023 0302 	bic.w	r3, r3, #2
 8001dca:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a18      	ldr	r2, [pc, #96]	@ (8001e34 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8001dd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e018      	b.n	8001e24 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	025b      	lsls	r3, r3, #9
 8001dfc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001dfe:	2390      	movs	r3, #144	@ 0x90
 8001e00:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f107 0210 	add.w	r2, r7, #16
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fed5 	bl	8002bc8 <SDIO_ConfigData>

      return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3730      	adds	r7, #48	@ 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08002365 	.word	0x08002365
 8001e30:	08002401 	.word	0x08002401
 8001e34:	004005ff 	.word	0x004005ff
 8001e38:	4225858c 	.word	0x4225858c

08001e3c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e5e:	0f9b      	lsrs	r3, r3, #30
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e7c:	0e1b      	lsrs	r3, r3, #24
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e8e:	0c1b      	lsrs	r3, r3, #16
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eb0:	0d1b      	lsrs	r3, r3, #20
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ece:	0bdb      	lsrs	r3, r3, #15
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ee0:	0b9b      	lsrs	r3, r3, #14
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ef2:	0b5b      	lsrs	r3, r3, #13
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f04:	0b1b      	lsrs	r3, r3, #12
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2200      	movs	r2, #0
 8001f16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d163      	bne.n	8001fe8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f24:	009a      	lsls	r2, r3, #2
 8001f26:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8001f30:	0f92      	lsrs	r2, r2, #30
 8001f32:	431a      	orrs	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f3c:	0edb      	lsrs	r3, r3, #27
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f4e:	0e1b      	lsrs	r3, r3, #24
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f60:	0d5b      	lsrs	r3, r3, #21
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f72:	0c9b      	lsrs	r3, r3, #18
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f84:	0bdb      	lsrs	r3, r3, #15
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	2201      	movs	r2, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	7a1b      	ldrb	r3, [r3, #8]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001fd4:	0a52      	lsrs	r2, r2, #9
 8001fd6:	fb03 f202 	mul.w	r2, r3, r2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe4:	661a      	str	r2, [r3, #96]	@ 0x60
 8001fe6:	e031      	b.n	800204c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d11d      	bne.n	800202c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ffe:	0c1b      	lsrs	r3, r3, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	3301      	adds	r3, #1
 800200c:	029a      	lsls	r2, r3, #10
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002020:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	661a      	str	r2, [r3, #96]	@ 0x60
 800202a:	e00f      	b.n	800204c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a58      	ldr	r2, [pc, #352]	@ (8002194 <HAL_SD_GetCardCSD+0x344>)
 8002032:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002038:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e09d      	b.n	8002188 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002050:	0b9b      	lsrs	r3, r3, #14
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	b2da      	uxtb	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002062:	09db      	lsrs	r3, r3, #7
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800206a:	b2da      	uxtb	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800207a:	b2da      	uxtb	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	0fdb      	lsrs	r3, r3, #31
 8002086:	b2da      	uxtb	r2, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002090:	0f5b      	lsrs	r3, r3, #29
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	b2da      	uxtb	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b4:	0d9b      	lsrs	r3, r3, #22
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c6:	0d5b      	lsrs	r3, r3, #21
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e2:	0c1b      	lsrs	r3, r3, #16
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f6:	0bdb      	lsrs	r3, r3, #15
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210a:	0b9b      	lsrs	r3, r3, #14
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211e:	0b5b      	lsrs	r3, r3, #13
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	0b1b      	lsrs	r3, r3, #12
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	b2da      	uxtb	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002146:	0a9b      	lsrs	r3, r3, #10
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	b2da      	uxtb	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216e:	085b      	lsrs	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002176:	b2da      	uxtb	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	004005ff 	.word	0x004005ff

08002198 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b08e      	sub	sp, #56	@ 0x38
 80021f4:	af04      	add	r7, sp, #16
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220c:	2b03      	cmp	r3, #3
 800220e:	d02e      	beq.n	800226e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002216:	d106      	bne.n	8002226 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	639a      	str	r2, [r3, #56]	@ 0x38
 8002224:	e029      	b.n	800227a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800222c:	d10a      	bne.n	8002244 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fabc 	bl	80027ac <SD_WideBus_Enable>
 8002234:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	639a      	str	r2, [r3, #56]	@ 0x38
 8002242:	e01a      	b.n	800227a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 faf9 	bl	8002842 <SD_WideBus_Disable>
 8002250:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	639a      	str	r2, [r3, #56]	@ 0x38
 800225e:	e00c      	b.n	800227a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002264:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	639a      	str	r2, [r3, #56]	@ 0x38
 800226c:	e005      	b.n	800227a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002272:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a26      	ldr	r2, [pc, #152]	@ (8002320 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002288:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002298:	e01f      	b.n	80022da <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681d      	ldr	r5, [r3, #0]
 80022c0:	466c      	mov	r4, sp
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d4:	4628      	mov	r0, r5
 80022d6:	f000 fbd9 	bl	8002a8c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fc9c 	bl	8002c20 <SDMMC_CmdBlockLength>
 80022e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <HAL_SD_ConfigWideBusOperation+0x130>)
 80022f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8002312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002316:	4618      	mov	r0, r3
 8002318:	3728      	adds	r7, #40	@ 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bdb0      	pop	{r4, r5, r7, pc}
 800231e:	bf00      	nop
 8002320:	004005ff 	.word	0x004005ff

08002324 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fa10 	bl	800275c <SD_SendStatus>
 800233c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	0a5b      	lsrs	r3, r3, #9
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800235a:	693b      	ldr	r3, [r7, #16]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002370:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002380:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	2b82      	cmp	r3, #130	@ 0x82
 80023a2:	d111      	bne.n	80023c8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fce3 	bl	8002d74 <SDMMC_CmdStopTransfer>
 80023ae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	431a      	orrs	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7ff fd3a 	bl	8001e3c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0208 	bic.w	r2, r2, #8
 80023d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80023e0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f001 f93f 	bl	8003674 <HAL_SD_RxCpltCallback>
#endif
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fc87 	bl	8000d22 <HAL_DMA_GetError>
 8002414:	4603      	mov	r3, r0
 8002416:	2b02      	cmp	r3, #2
 8002418:	d03e      	beq.n	8002498 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002420:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d002      	beq.n	8002436 <SD_DMAError+0x36>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d12d      	bne.n	8002492 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a19      	ldr	r2, [pc, #100]	@ (80024a0 <SD_DMAError+0xa0>)
 800243c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800244c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002452:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7ff ff62 	bl	8002324 <HAL_SD_GetCardState>
 8002460:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b06      	cmp	r3, #6
 8002466:	d002      	beq.n	800246e <SD_DMAError+0x6e>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10a      	bne.n	8002484 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fc7e 	bl	8002d74 <SDMMC_CmdStopTransfer>
 8002478:	4602      	mov	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff fcd2 	bl	8001e3c <HAL_SD_ErrorCallback>
#endif
  }
}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	004005ff 	.word	0x004005ff

080024a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80024a4:	b5b0      	push	{r4, r5, r7, lr}
 80024a6:	b094      	sub	sp, #80	@ 0x50
 80024a8:	af04      	add	r7, sp, #16
 80024aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80024ac:	2301      	movs	r3, #1
 80024ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fb2f 	bl	8002b18 <SDIO_GetPowerState>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80024c0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80024c4:	e0b8      	b.n	8002638 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d02f      	beq.n	800252e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fd58 	bl	8002f88 <SDMMC_CmdSendCID>
 80024d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80024da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80024e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e2:	e0a9      	b.n	8002638 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fb59 	bl	8002ba2 <SDIO_GetResponse>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2104      	movs	r1, #4
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fb50 	bl	8002ba2 <SDIO_GetResponse>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2108      	movs	r1, #8
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fb47 	bl	8002ba2 <SDIO_GetResponse>
 8002514:	4602      	mov	r2, r0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	210c      	movs	r1, #12
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fb3e 	bl	8002ba2 <SDIO_GetResponse>
 8002526:	4602      	mov	r2, r0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	2b03      	cmp	r3, #3
 8002534:	d00d      	beq.n	8002552 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f107 020e 	add.w	r2, r7, #14
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fd5e 	bl	8003002 <SDMMC_CmdSetRelAdd>
 8002546:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <SD_InitCard+0xae>
    {
      return errorstate;
 800254e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002550:	e072      	b.n	8002638 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	2b03      	cmp	r3, #3
 8002558:	d036      	beq.n	80025c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800255a:	89fb      	ldrh	r3, [r7, #14]
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256a:	041b      	lsls	r3, r3, #16
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f000 fd28 	bl	8002fc4 <SDMMC_CmdSendCSD>
 8002574:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <SD_InitCard+0xdc>
    {
      return errorstate;
 800257c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800257e:	e05b      	b.n	8002638 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fb0b 	bl	8002ba2 <SDIO_GetResponse>
 800258c:	4602      	mov	r2, r0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2104      	movs	r1, #4
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fb02 	bl	8002ba2 <SDIO_GetResponse>
 800259e:	4602      	mov	r2, r0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2108      	movs	r1, #8
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 faf9 	bl	8002ba2 <SDIO_GetResponse>
 80025b0:	4602      	mov	r2, r0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	210c      	movs	r1, #12
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 faf0 	bl	8002ba2 <SDIO_GetResponse>
 80025c2:	4602      	mov	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2104      	movs	r1, #4
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fae7 	bl	8002ba2 <SDIO_GetResponse>
 80025d4:	4603      	mov	r3, r0
 80025d6:	0d1a      	lsrs	r2, r3, #20
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fc34 	bl	8001e50 <HAL_SD_GetCardCSD>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80025f2:	e021      	b.n	8002638 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	2200      	movs	r2, #0
 8002600:	461c      	mov	r4, r3
 8002602:	4615      	mov	r5, r2
 8002604:	4622      	mov	r2, r4
 8002606:	462b      	mov	r3, r5
 8002608:	4608      	mov	r0, r1
 800260a:	f000 fbd5 	bl	8002db8 <SDMMC_CmdSelDesel>
 800260e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <SD_InitCard+0x176>
  {
    return errorstate;
 8002616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002618:	e00e      	b.n	8002638 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681d      	ldr	r5, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	466c      	mov	r4, sp
 8002622:	f103 0210 	add.w	r2, r3, #16
 8002626:	ca07      	ldmia	r2, {r0, r1, r2}
 8002628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800262c:	3304      	adds	r3, #4
 800262e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002630:	4628      	mov	r0, r5
 8002632:	f000 fa2b 	bl	8002a8c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3740      	adds	r7, #64	@ 0x40
 800263c:	46bd      	mov	sp, r7
 800263e:	bdb0      	pop	{r4, r5, r7, pc}

08002640 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fbd0 	bl	8002dfe <SDMMC_CmdGoIdleState>
 800265e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <SD_PowerON+0x2a>
  {
    return errorstate;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	e072      	b.n	8002750 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fbe3 	bl	8002e3a <SDMMC_CmdOperCond>
 8002674:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fbb9 	bl	8002dfe <SDMMC_CmdGoIdleState>
 800268c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <SD_PowerON+0x5e>
    {
      return errorstate;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	e05b      	b.n	8002750 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d137      	bne.n	8002716 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fbe3 	bl	8002e78 <SDMMC_CmdAppCommand>
 80026b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d02d      	beq.n	8002716 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80026be:	e047      	b.n	8002750 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fbd6 	bl	8002e78 <SDMMC_CmdAppCommand>
 80026cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	e03b      	b.n	8002750 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	491e      	ldr	r1, [pc, #120]	@ (8002758 <SD_PowerON+0x118>)
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fbec 	bl	8002ebc <SDMMC_CmdAppOperCommand>
 80026e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80026f0:	e02e      	b.n	8002750 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fa52 	bl	8002ba2 <SDIO_GetResponse>
 80026fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	0fdb      	lsrs	r3, r3, #31
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <SD_PowerON+0xcc>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <SD_PowerON+0xce>
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]

    count++;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	3301      	adds	r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800271c:	4293      	cmp	r3, r2
 800271e:	d802      	bhi.n	8002726 <SD_PowerON+0xe6>
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0cc      	beq.n	80026c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800272c:	4293      	cmp	r3, r2
 800272e:	d902      	bls.n	8002736 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002730:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002734:	e00c      	b.n	8002750 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
 8002746:	e002      	b.n	800274e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	c1100000 	.word	0xc1100000

0800275c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800276c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002770:	e018      	b.n	80027a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 fc60 	bl	8003044 <SDMMC_CmdSendStatus>
 8002784:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <SD_SendStatus+0x34>
  {
    return errorstate;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	e009      	b.n	80027a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fa03 	bl	8002ba2 <SDIO_GetResponse>
 800279c:	4602      	mov	r2, r0
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f9ed 	bl	8002ba2 <SDIO_GetResponse>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027d2:	d102      	bne.n	80027da <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80027d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027d8:	e02f      	b.n	800283a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4619      	mov	r1, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f879 	bl	80028d8 <SD_FindSCR>
 80027e6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	e023      	b.n	800283a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01c      	beq.n	8002836 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f000 fb35 	bl	8002e78 <SDMMC_CmdAppCommand>
 800280e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	e00f      	b.n	800283a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2102      	movs	r1, #2
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fb6e 	bl	8002f02 <SDMMC_CmdBusWidth>
 8002826:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	e003      	b.n	800283a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002832:	2300      	movs	r3, #0
 8002834:	e001      	b.n	800283a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002836:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f9a2 	bl	8002ba2 <SDIO_GetResponse>
 800285e:	4603      	mov	r3, r0
 8002860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002868:	d102      	bne.n	8002870 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800286a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800286e:	e02f      	b.n	80028d0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	4619      	mov	r1, r3
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f82e 	bl	80028d8 <SD_FindSCR>
 800287c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	e023      	b.n	80028d0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01c      	beq.n	80028cc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289a:	041b      	lsls	r3, r3, #16
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f000 faea 	bl	8002e78 <SDMMC_CmdAppCommand>
 80028a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	e00f      	b.n	80028d0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fb23 	bl	8002f02 <SDMMC_CmdBusWidth>
 80028bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	e003      	b.n	80028d0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e001      	b.n	80028d0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80028cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b08f      	sub	sp, #60	@ 0x3c
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80028e2:	f7fe f8b1 	bl	8000a48 <HAL_GetTick>
 80028e6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2108      	movs	r1, #8
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f98e 	bl	8002c20 <SDMMC_CmdBlockLength>
 8002904:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <SD_FindSCR+0x38>
  {
    return errorstate;
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	e0b9      	b.n	8002a84 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	4619      	mov	r1, r3
 800291c:	4610      	mov	r0, r2
 800291e:	f000 faab 	bl	8002e78 <SDMMC_CmdAppCommand>
 8002922:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <SD_FindSCR+0x56>
  {
    return errorstate;
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	e0aa      	b.n	8002a84 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002934:	2308      	movs	r3, #8
 8002936:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002938:	2330      	movs	r3, #48	@ 0x30
 800293a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800293c:	2302      	movs	r3, #2
 800293e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002944:	2301      	movs	r3, #1
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f107 0210 	add.w	r2, r7, #16
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f938 	bl	8002bc8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 faf2 	bl	8002f46 <SDMMC_CmdSendSCR>
 8002962:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	2b00      	cmp	r3, #0
 8002968:	d02a      	beq.n	80029c0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800296a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296c:	e08a      	b.n	8002a84 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00f      	beq.n	800299c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	f107 0208 	add.w	r2, r7, #8
 8002988:	18d4      	adds	r4, r2, r3
 800298a:	4608      	mov	r0, r1
 800298c:	f000 f8a9 	bl	8002ae2 <SDIO_ReadFIFO>
 8002990:	4603      	mov	r3, r0
 8002992:	6023      	str	r3, [r4, #0]
      index++;
 8002994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002996:	3301      	adds	r3, #1
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
 800299a:	e006      	b.n	80029aa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80029aa:	f7fe f84d 	bl	8000a48 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d102      	bne.n	80029c0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80029ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029be:	e061      	b.n	8002a84 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0cf      	beq.n	800296e <SD_FindSCR+0x96>
 80029ce:	e000      	b.n	80029d2 <SD_FindSCR+0xfa>
      break;
 80029d0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <SD_FindSCR+0x116>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2208      	movs	r2, #8
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80029f6:	2308      	movs	r3, #8
 80029f8:	e044      	b.n	8002a84 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002a10:	2302      	movs	r3, #2
 8002a12:	e037      	b.n	8002a84 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2220      	movs	r2, #32
 8002a28:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e02a      	b.n	8002a84 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002a36:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	061a      	lsls	r2, r3, #24
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002a44:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002a4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0e1b      	lsrs	r3, r3, #24
 8002a54:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	601a      	str	r2, [r3, #0]
    scr++;
 8002a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	061a      	lsls	r2, r3, #24
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002a6c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002a76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	0e1b      	lsrs	r3, r3, #24
 8002a7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a80:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	373c      	adds	r7, #60	@ 0x3c
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}

08002a8c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	f107 001c 	add.w	r0, r7, #28
 8002a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002aa2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002aa6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8002aaa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8002aae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8002ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8002ab2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8002ab6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8002ac6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	b004      	add	sp, #16
 8002ae0:	4770      	bx	lr

08002ae2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2203      	movs	r2, #3
 8002b08:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0303 	and.w	r3, r3, #3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002b52:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002b58:	431a      	orrs	r2, r3
                       Command->CPSM);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8002b5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002b6e:	f023 030f 	bic.w	r3, r3, #15
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	b2db      	uxtb	r3, r3
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3314      	adds	r3, #20
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
}  
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002bee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002bf4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8002bfa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0

}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002c2e:	2310      	movs	r3, #16
 8002c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c32:	2340      	movs	r3, #64	@ 0x40
 8002c34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff74 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c50:	2110      	movs	r1, #16
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa18 	bl	8003088 <SDMMC_GetCmdResp1>
 8002c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002c72:	2311      	movs	r3, #17
 8002c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c76:	2340      	movs	r3, #64	@ 0x40
 8002c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c84:	f107 0308 	add.w	r3, r7, #8
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ff52 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c94:	2111      	movs	r1, #17
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f9f6 	bl	8003088 <SDMMC_GetCmdResp1>
 8002c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002cb6:	2312      	movs	r3, #18
 8002cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002cba:	2340      	movs	r3, #64	@ 0x40
 8002cbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002cc8:	f107 0308 	add.w	r3, r7, #8
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ff30 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd8:	2112      	movs	r1, #18
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9d4 	bl	8003088 <SDMMC_GetCmdResp1>
 8002ce0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002cfa:	2318      	movs	r3, #24
 8002cfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002cfe:	2340      	movs	r3, #64	@ 0x40
 8002d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ff0e 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1c:	2118      	movs	r1, #24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9b2 	bl	8003088 <SDMMC_GetCmdResp1>
 8002d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002d26:	69fb      	ldr	r3, [r7, #28]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002d3e:	2319      	movs	r3, #25
 8002d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d42:	2340      	movs	r3, #64	@ 0x40
 8002d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d50:	f107 0308 	add.w	r3, r7, #8
 8002d54:	4619      	mov	r1, r3
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff feec 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d60:	2119      	movs	r1, #25
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f990 	bl	8003088 <SDMMC_GetCmdResp1>
 8002d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002d80:	230c      	movs	r3, #12
 8002d82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d84:	2340      	movs	r3, #64	@ 0x40
 8002d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fecb 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002d9e:	4a05      	ldr	r2, [pc, #20]	@ (8002db4 <SDMMC_CmdStopTransfer+0x40>)
 8002da0:	210c      	movs	r1, #12
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f970 	bl	8003088 <SDMMC_GetCmdResp1>
 8002da8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002daa:	69fb      	ldr	r3, [r7, #28]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	05f5e100 	.word	0x05f5e100

08002db8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	@ 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002dc8:	2307      	movs	r3, #7
 8002dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dcc:	2340      	movs	r3, #64	@ 0x40
 8002dce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002dda:	f107 0310 	add.w	r3, r7, #16
 8002dde:	4619      	mov	r1, r3
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fea7 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dea:	2107      	movs	r1, #7
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f94b 	bl	8003088 <SDMMC_GetCmdResp1>
 8002df2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3728      	adds	r7, #40	@ 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b088      	sub	sp, #32
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e1c:	f107 0308 	add.w	r3, r7, #8
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff fe86 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fb65 	bl	80034f8 <SDMMC_GetCmdError>
 8002e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002e30:	69fb      	ldr	r3, [r7, #28]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b088      	sub	sp, #32
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002e42:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8002e46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002e48:	2308      	movs	r3, #8
 8002e4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e4c:	2340      	movs	r3, #64	@ 0x40
 8002e4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fe67 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 faf8 	bl	800345c <SDMMC_GetCmdResp7>
 8002e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002e86:	2337      	movs	r3, #55	@ 0x37
 8002e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e8a:	2340      	movs	r3, #64	@ 0x40
 8002e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff fe48 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea8:	2137      	movs	r1, #55	@ 0x37
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8ec 	bl	8003088 <SDMMC_GetCmdResp1>
 8002eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ecc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002ed2:	2329      	movs	r3, #41	@ 0x29
 8002ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ed6:	2340      	movs	r3, #64	@ 0x40
 8002ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fe22 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f9ff 	bl	80032f4 <SDMMC_GetCmdResp3>
 8002ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b088      	sub	sp, #32
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8002f10:	2306      	movs	r3, #6
 8002f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f14:	2340      	movs	r3, #64	@ 0x40
 8002f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff fe03 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8002f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f32:	2106      	movs	r1, #6
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f8a7 	bl	8003088 <SDMMC_GetCmdResp1>
 8002f3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b088      	sub	sp, #32
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002f52:	2333      	movs	r3, #51	@ 0x33
 8002f54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f56:	2340      	movs	r3, #64	@ 0x40
 8002f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fde2 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8002f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f74:	2133      	movs	r1, #51	@ 0x33
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f886 	bl	8003088 <SDMMC_GetCmdResp1>
 8002f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002f94:	2302      	movs	r3, #2
 8002f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002f98:	23c0      	movs	r3, #192	@ 0xc0
 8002f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fa6:	f107 0308 	add.w	r3, r7, #8
 8002faa:	4619      	mov	r1, r3
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fdc1 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f956 	bl	8003264 <SDMMC_GetCmdResp2>
 8002fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002fba:	69fb      	ldr	r3, [r7, #28]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002fd2:	2309      	movs	r3, #9
 8002fd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002fd6:	23c0      	movs	r3, #192	@ 0xc0
 8002fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fda2 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f937 	bl	8003264 <SDMMC_GetCmdResp2>
 8002ff6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3720      	adds	r7, #32
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b088      	sub	sp, #32
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003010:	2303      	movs	r3, #3
 8003012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003014:	2340      	movs	r3, #64	@ 0x40
 8003016:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800301c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003020:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003022:	f107 0308 	add.w	r3, r7, #8
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fd83 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	2103      	movs	r1, #3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f99c 	bl	8003370 <SDMMC_GetCmdResp6>
 8003038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800303a:	69fb      	ldr	r3, [r7, #28]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003052:	230d      	movs	r3, #13
 8003054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003056:	2340      	movs	r3, #64	@ 0x40
 8003058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800305e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003062:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fd62 	bl	8002b34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003074:	210d      	movs	r1, #13
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f806 	bl	8003088 <SDMMC_GetCmdResp1>
 800307c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800307e:	69fb      	ldr	r3, [r7, #28]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	460b      	mov	r3, r1
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003096:	4b70      	ldr	r3, [pc, #448]	@ (8003258 <SDMMC_GetCmdResp1+0x1d0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a70      	ldr	r2, [pc, #448]	@ (800325c <SDMMC_GetCmdResp1+0x1d4>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	0a5a      	lsrs	r2, r3, #9
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	1e5a      	subs	r2, r3, #1
 80030ae:	61fa      	str	r2, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80030b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80030b8:	e0c9      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0ef      	beq.n	80030aa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ea      	bne.n	80030aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d004      	beq.n	80030ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2204      	movs	r2, #4
 80030e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80030e6:	2304      	movs	r3, #4
 80030e8:	e0b1      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0a6      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	22c5      	movs	r2, #197	@ 0xc5
 8003104:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff fd3e 	bl	8002b88 <SDIO_GetCommandResponse>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	4293      	cmp	r3, r2
 8003114:	d001      	beq.n	800311a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003116:	2301      	movs	r3, #1
 8003118:	e099      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800311a:	2100      	movs	r1, #0
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fd40 	bl	8002ba2 <SDIO_GetResponse>
 8003122:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4b4e      	ldr	r3, [pc, #312]	@ (8003260 <SDMMC_GetCmdResp1+0x1d8>)
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800312e:	2300      	movs	r3, #0
 8003130:	e08d      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	da02      	bge.n	800313e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003138:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800313c:	e087      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003148:	2340      	movs	r3, #64	@ 0x40
 800314a:	e080      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003156:	2380      	movs	r3, #128	@ 0x80
 8003158:	e079      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003168:	e071      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003174:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003178:	e069      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003188:	e061      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003194:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003198:	e059      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80031a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031a8:	e051      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80031b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031b8:	e049      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80031c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031c8:	e041      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80031d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031d8:	e039      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80031e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031e8:	e031      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80031f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031f8:	e029      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003204:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003208:	e021      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003214:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003218:	e019      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003224:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003228:	e011      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003234:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003238:	e009      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003244:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003248:	e001      	b.n	800324e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800324a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000000 	.word	0x20000000
 800325c:	10624dd3 	.word	0x10624dd3
 8003260:	fdffe008 	.word	0xfdffe008

08003264 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800326c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ec <SDMMC_GetCmdResp2+0x88>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	@ (80032f0 <SDMMC_GetCmdResp2+0x8c>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0a5b      	lsrs	r3, r3, #9
 8003278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	60fa      	str	r2, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800328c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003290:	e026      	b.n	80032e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003296:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ef      	beq.n	8003282 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ea      	bne.n	8003282 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2204      	movs	r2, #4
 80032bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80032be:	2304      	movs	r3, #4
 80032c0:	e00e      	b.n	80032e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e003      	b.n	80032e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	22c5      	movs	r2, #197	@ 0xc5
 80032dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	20000000 	.word	0x20000000
 80032f0:	10624dd3 	.word	0x10624dd3

080032f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <SDMMC_GetCmdResp3+0x74>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1a      	ldr	r2, [pc, #104]	@ (800336c <SDMMC_GetCmdResp3+0x78>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e5a      	subs	r2, r3, #1
 8003316:	60fa      	str	r2, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800331c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003320:	e01b      	b.n	800335a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003326:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ef      	beq.n	8003312 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ea      	bne.n	8003312 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2204      	movs	r2, #4
 800334c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800334e:	2304      	movs	r3, #4
 8003350:	e003      	b.n	800335a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	22c5      	movs	r2, #197	@ 0xc5
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	460b      	mov	r3, r1
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800337e:	4b35      	ldr	r3, [pc, #212]	@ (8003454 <SDMMC_GetCmdResp6+0xe4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a35      	ldr	r2, [pc, #212]	@ (8003458 <SDMMC_GetCmdResp6+0xe8>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	0a5b      	lsrs	r3, r3, #9
 800338a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	61fa      	str	r2, [r7, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800339e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80033a2:	e052      	b.n	800344a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ef      	beq.n	8003394 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ea      	bne.n	8003394 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2204      	movs	r2, #4
 80033ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80033d0:	2304      	movs	r3, #4
 80033d2:	e03a      	b.n	800344a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d004      	beq.n	80033ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e02f      	b.n	800344a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7ff fbcc 	bl	8002b88 <SDIO_GetCommandResponse>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	7afb      	ldrb	r3, [r7, #11]
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d001      	beq.n	80033fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e025      	b.n	800344a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	22c5      	movs	r2, #197	@ 0xc5
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003404:	2100      	movs	r1, #0
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff fbcb 	bl	8002ba2 <SDIO_GetResponse>
 800340c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	b29a      	uxth	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003422:	2300      	movs	r3, #0
 8003424:	e011      	b.n	800344a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003434:	e009      	b.n	800344a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003444:	e001      	b.n	800344a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003446:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000000 	.word	0x20000000
 8003458:	10624dd3 	.word	0x10624dd3

0800345c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003464:	4b22      	ldr	r3, [pc, #136]	@ (80034f0 <SDMMC_GetCmdResp7+0x94>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a22      	ldr	r2, [pc, #136]	@ (80034f4 <SDMMC_GetCmdResp7+0x98>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	0a5b      	lsrs	r3, r3, #9
 8003470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003474:	fb02 f303 	mul.w	r3, r2, r3
 8003478:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	60fa      	str	r2, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003484:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003488:	e02c      	b.n	80034e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ef      	beq.n	800347a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ea      	bne.n	800347a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2204      	movs	r2, #4
 80034b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80034b6:	2304      	movs	r3, #4
 80034b8:	e014      	b.n	80034e4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e009      	b.n	80034e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2240      	movs	r2, #64	@ 0x40
 80034e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80034e2:	2300      	movs	r3, #0
  
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	20000000 	.word	0x20000000
 80034f4:	10624dd3 	.word	0x10624dd3

080034f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003500:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <SDMMC_GetCmdError+0x50>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a11      	ldr	r2, [pc, #68]	@ (800354c <SDMMC_GetCmdError+0x54>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0a5b      	lsrs	r3, r3, #9
 800350c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	60fa      	str	r2, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003520:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003524:	e009      	b.n	800353a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f1      	beq.n	8003516 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	22c5      	movs	r2, #197	@ 0xc5
 8003536:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000000 	.word	0x20000000
 800354c:	10624dd3 	.word	0x10624dd3

08003550 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003554:	4904      	ldr	r1, [pc, #16]	@ (8003568 <MX_FATFS_Init+0x18>)
 8003556:	4805      	ldr	r0, [pc, #20]	@ (800356c <MX_FATFS_Init+0x1c>)
 8003558:	f002 fbda 	bl	8005d10 <FATFS_LinkDriver>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	4b03      	ldr	r3, [pc, #12]	@ (8003570 <MX_FATFS_Init+0x20>)
 8003562:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000518 	.word	0x20000518
 800356c:	08005e1c 	.word	0x08005e1c
 8003570:	20000514 	.word	0x20000514

08003574 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003578:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800358e:	f000 f87b 	bl	8003688 <BSP_SD_IsDetected>
 8003592:	4603      	mov	r3, r0
 8003594:	2b01      	cmp	r3, #1
 8003596:	d001      	beq.n	800359c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e012      	b.n	80035c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800359c:	480b      	ldr	r0, [pc, #44]	@ (80035cc <BSP_SD_Init+0x48>)
 800359e:	f7fe f9d5 	bl	800194c <HAL_SD_Init>
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80035ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80035b0:	4806      	ldr	r0, [pc, #24]	@ (80035cc <BSP_SD_Init+0x48>)
 80035b2:	f7fe fe1d 	bl	80021f0 <HAL_SD_ConfigWideBusOperation>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80035c0:	79fb      	ldrb	r3, [r7, #7]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000048c 	.word	0x2000048c

080035d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	68f9      	ldr	r1, [r7, #12]
 80035e6:	4806      	ldr	r0, [pc, #24]	@ (8003600 <BSP_SD_ReadBlocks_DMA+0x30>)
 80035e8:	f7fe fa60 	bl	8001aac <HAL_SD_ReadBlocks_DMA>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	2000048c 	.word	0x2000048c

08003604 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	4806      	ldr	r0, [pc, #24]	@ (8003634 <BSP_SD_WriteBlocks_DMA+0x30>)
 800361c:	f7fe fb28 	bl	8001c70 <HAL_SD_WriteBlocks_DMA>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	2000048c 	.word	0x2000048c

08003638 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800363c:	4805      	ldr	r0, [pc, #20]	@ (8003654 <BSP_SD_GetCardState+0x1c>)
 800363e:	f7fe fe71 	bl	8002324 <HAL_SD_GetCardState>
 8003642:	4603      	mov	r3, r0
 8003644:	2b04      	cmp	r3, #4
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
}
 800364e:	4618      	mov	r0, r3
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000048c 	.word	0x2000048c

08003658 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4803      	ldr	r0, [pc, #12]	@ (8003670 <BSP_SD_GetCardInfo+0x18>)
 8003664:	f7fe fd98 	bl	8002198 <HAL_SD_GetCardInfo>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	2000048c 	.word	0x2000048c

08003674 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800367c:	f000 f996 	bl	80039ac <BSP_SD_ReadCpltCallback>
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800368e:	2301      	movs	r3, #1
 8003690:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8003692:	f000 f80b 	bl	80036ac <BSP_PlatformIsDetected>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800369c:	2300      	movs	r3, #0
 800369e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	b2db      	uxtb	r3, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80036b2:	2301      	movs	r3, #1
 80036b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80036b6:	2102      	movs	r1, #2
 80036b8:	4806      	ldr	r0, [pc, #24]	@ (80036d4 <BSP_PlatformIsDetected+0x28>)
 80036ba:	f7fd fcf1 	bl	80010a0 <HAL_GPIO_ReadPin>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80036c4:	2300      	movs	r3, #0
 80036c6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80036c8:	79fb      	ldrb	r3, [r7, #7]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40020000 	.word	0x40020000

080036d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80036e0:	f7fd f9b2 	bl	8000a48 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80036e6:	e006      	b.n	80036f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80036e8:	f7ff ffa6 	bl	8003638 <BSP_SD_GetCardState>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e009      	b.n	800370a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80036f6:	f7fd f9a7 	bl	8000a48 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d8f0      	bhi.n	80036e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800371e:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <SD_CheckStatus+0x38>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003724:	f7ff ff88 	bl	8003638 <BSP_SD_GetCardState>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800372e:	4b07      	ldr	r3, [pc, #28]	@ (800374c <SD_CheckStatus+0x38>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4b04      	ldr	r3, [pc, #16]	@ (800374c <SD_CheckStatus+0x38>)
 800373c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800373e:	4b03      	ldr	r3, [pc, #12]	@ (800374c <SD_CheckStatus+0x38>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	b2db      	uxtb	r3, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000009 	.word	0x20000009

08003750 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800375a:	f7ff ff13 	bl	8003584 <BSP_SD_Init>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ffd4 	bl	8003714 <SD_CheckStatus>
 800376c:	4603      	mov	r3, r0
 800376e:	461a      	mov	r2, r3
 8003770:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <SD_initialize+0x34>)
 8003772:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003774:	4b03      	ldr	r3, [pc, #12]	@ (8003784 <SD_initialize+0x34>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	b2db      	uxtb	r3, r3
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000009 	.word	0x20000009

08003788 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ffbd 	bl	8003714 <SD_CheckStatus>
 800379a:	4603      	mov	r3, r0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80037b8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80037bc:	f7ff ff8c 	bl	80036d8 <SD_CheckStatusWithTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da01      	bge.n	80037ca <SD_read+0x26>
  {
    return res;
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	e03b      	b.n	8003842 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	68b8      	ldr	r0, [r7, #8]
 80037d0:	f7ff fefe 	bl	80035d0 <BSP_SD_ReadBlocks_DMA>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d132      	bne.n	8003840 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80037da:	4b1c      	ldr	r3, [pc, #112]	@ (800384c <SD_read+0xa8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80037e0:	f7fd f932 	bl	8000a48 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80037e6:	bf00      	nop
 80037e8:	4b18      	ldr	r3, [pc, #96]	@ (800384c <SD_read+0xa8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d108      	bne.n	8003802 <SD_read+0x5e>
 80037f0:	f7fd f92a 	bl	8000a48 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80037fe:	4293      	cmp	r3, r2
 8003800:	d9f2      	bls.n	80037e8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8003802:	4b12      	ldr	r3, [pc, #72]	@ (800384c <SD_read+0xa8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
 800380e:	e017      	b.n	8003840 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8003810:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <SD_read+0xa8>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8003816:	f7fd f917 	bl	8000a48 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800381c:	e007      	b.n	800382e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800381e:	f7ff ff0b 	bl	8003638 <BSP_SD_GetCardState>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <SD_read+0x8a>
          {
            res = RES_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800382c:	e008      	b.n	8003840 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800382e:	f7fd f90b 	bl	8000a48 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f247 522f 	movw	r2, #29999	@ 0x752f
 800383c:	4293      	cmp	r3, r2
 800383e:	d9ee      	bls.n	800381e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8003840:	7dfb      	ldrb	r3, [r7, #23]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000520 	.word	0x20000520

08003850 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	4603      	mov	r3, r0
 800385e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8003864:	4b24      	ldr	r3, [pc, #144]	@ (80038f8 <SD_write+0xa8>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800386a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800386e:	f7ff ff33 	bl	80036d8 <SD_CheckStatusWithTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	da01      	bge.n	800387c <SD_write+0x2c>
  {
    return res;
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	e038      	b.n	80038ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	68b8      	ldr	r0, [r7, #8]
 8003882:	f7ff febf 	bl	8003604 <BSP_SD_WriteBlocks_DMA>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d12f      	bne.n	80038ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800388c:	f7fd f8dc 	bl	8000a48 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8003892:	bf00      	nop
 8003894:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <SD_write+0xa8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <SD_write+0x5e>
 800389c:	f7fd f8d4 	bl	8000a48 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d9f2      	bls.n	8003894 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80038ae:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <SD_write+0xa8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
 80038ba:	e017      	b.n	80038ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80038bc:	4b0e      	ldr	r3, [pc, #56]	@ (80038f8 <SD_write+0xa8>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80038c2:	f7fd f8c1 	bl	8000a48 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80038c8:	e007      	b.n	80038da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80038ca:	f7ff feb5 	bl	8003638 <BSP_SD_GetCardState>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <SD_write+0x8a>
          {
            res = RES_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	75fb      	strb	r3, [r7, #23]
            break;
 80038d8:	e008      	b.n	80038ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80038da:	f7fd f8b5 	bl	8000a48 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d9ee      	bls.n	80038ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2000051c 	.word	0x2000051c

080038fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	@ 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	603a      	str	r2, [r7, #0]
 8003906:	71fb      	strb	r3, [r7, #7]
 8003908:	460b      	mov	r3, r1
 800390a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003912:	4b25      	ldr	r3, [pc, #148]	@ (80039a8 <SD_ioctl+0xac>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <SD_ioctl+0x28>
 8003920:	2303      	movs	r3, #3
 8003922:	e03c      	b.n	800399e <SD_ioctl+0xa2>

  switch (cmd)
 8003924:	79bb      	ldrb	r3, [r7, #6]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d834      	bhi.n	8003994 <SD_ioctl+0x98>
 800392a:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <SD_ioctl+0x34>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003941 	.word	0x08003941
 8003934:	08003949 	.word	0x08003949
 8003938:	08003961 	.word	0x08003961
 800393c:	0800397b 	.word	0x0800397b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8003946:	e028      	b.n	800399a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fe83 	bl	8003658 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800395e:	e01c      	b.n	800399a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fe77 	bl	8003658 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396c:	b29a      	uxth	r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8003978:	e00f      	b.n	800399a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800397a:	f107 030c 	add.w	r3, r7, #12
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fe6a 	bl	8003658 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	0a5a      	lsrs	r2, r3, #9
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8003992:	e002      	b.n	800399a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003994:	2304      	movs	r3, #4
 8003996:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800399a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3730      	adds	r7, #48	@ 0x30
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000009 	.word	0x20000009

080039ac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80039b0:	4b03      	ldr	r3, [pc, #12]	@ (80039c0 <BSP_SD_ReadCpltCallback+0x14>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
}
 80039b6:	bf00      	nop
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	20000520 	.word	0x20000520

080039c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	4a08      	ldr	r2, [pc, #32]	@ (80039f4 <disk_status+0x30>)
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	79fa      	ldrb	r2, [r7, #7]
 80039dc:	4905      	ldr	r1, [pc, #20]	@ (80039f4 <disk_status+0x30>)
 80039de:	440a      	add	r2, r1
 80039e0:	7a12      	ldrb	r2, [r2, #8]
 80039e2:	4610      	mov	r0, r2
 80039e4:	4798      	blx	r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000054c 	.word	0x2000054c

080039f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	4a0e      	ldr	r2, [pc, #56]	@ (8003a44 <disk_initialize+0x4c>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d114      	bne.n	8003a3a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	4a0c      	ldr	r2, [pc, #48]	@ (8003a44 <disk_initialize+0x4c>)
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	79fa      	ldrb	r2, [r7, #7]
 8003a1e:	4909      	ldr	r1, [pc, #36]	@ (8003a44 <disk_initialize+0x4c>)
 8003a20:	440a      	add	r2, r1
 8003a22:	7a12      	ldrb	r2, [r2, #8]
 8003a24:	4610      	mov	r0, r2
 8003a26:	4798      	blx	r3
 8003a28:	4603      	mov	r3, r0
 8003a2a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	4a03      	ldr	r2, [pc, #12]	@ (8003a44 <disk_initialize+0x4c>)
 8003a36:	2101      	movs	r1, #1
 8003a38:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000054c 	.word	0x2000054c

08003a48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4603      	mov	r3, r0
 8003a56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a84 <disk_read+0x3c>)
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	689c      	ldr	r4, [r3, #8]
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	4a07      	ldr	r2, [pc, #28]	@ (8003a84 <disk_read+0x3c>)
 8003a68:	4413      	add	r3, r2
 8003a6a:	7a18      	ldrb	r0, [r3, #8]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	47a0      	blx	r4
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]
  return res;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd90      	pop	{r4, r7, pc}
 8003a82:	bf00      	nop
 8003a84:	2000054c 	.word	0x2000054c

08003a88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4603      	mov	r3, r0
 8003a96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <disk_write+0x3c>)
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	68dc      	ldr	r4, [r3, #12]
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	4a07      	ldr	r2, [pc, #28]	@ (8003ac4 <disk_write+0x3c>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	7a18      	ldrb	r0, [r3, #8]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	47a0      	blx	r4
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2000054c 	.word	0x2000054c

08003ac8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	603a      	str	r2, [r7, #0]
 8003ad2:	71fb      	strb	r3, [r7, #7]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	4a09      	ldr	r2, [pc, #36]	@ (8003b00 <disk_ioctl+0x38>)
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	79fa      	ldrb	r2, [r7, #7]
 8003ae6:	4906      	ldr	r1, [pc, #24]	@ (8003b00 <disk_ioctl+0x38>)
 8003ae8:	440a      	add	r2, r1
 8003aea:	7a10      	ldrb	r0, [r2, #8]
 8003aec:	79b9      	ldrb	r1, [r7, #6]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	4798      	blx	r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]
  return res;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	2000054c 	.word	0x2000054c

08003b04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003b14:	89fb      	ldrh	r3, [r7, #14]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	b21a      	sxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	4313      	orrs	r3, r2
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003b26:	89fb      	ldrh	r3, [r7, #14]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3303      	adds	r3, #3
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	3202      	adds	r2, #2
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	3201      	adds	r2, #1
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	887a      	ldrh	r2, [r7, #2]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	887b      	ldrh	r3, [r7, #2]
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	1c53      	adds	r3, r2, #1
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	1c59      	adds	r1, r3, #1
 8003c2c:	6179      	str	r1, [r7, #20]
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f1      	bne.n	8003c22 <mem_cpy+0x1a>
	}
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003c4a:	b480      	push	{r7}
 8003c4c:	b087      	sub	sp, #28
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	617a      	str	r2, [r7, #20]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f3      	bne.n	8003c5a <mem_set+0x10>
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	@ 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	61fa      	str	r2, [r7, #28]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	61ba      	str	r2, [r7, #24]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	1acb      	subs	r3, r1, r3
 8003cac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <mem_cmp+0x40>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0eb      	beq.n	8003c98 <mem_cmp+0x18>

	return r;
 8003cc0:	697b      	ldr	r3, [r7, #20]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003cd8:	e002      	b.n	8003ce0 <chk_chr+0x12>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <chk_chr+0x26>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d1f2      	bne.n	8003cda <chk_chr+0xc>
	return *str;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	e029      	b.n	8003d6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003d18:	4a27      	ldr	r2, [pc, #156]	@ (8003db8 <chk_lock+0xb4>)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	4413      	add	r3, r2
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01d      	beq.n	8003d62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003d26:	4a24      	ldr	r2, [pc, #144]	@ (8003db8 <chk_lock+0xb4>)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	4413      	add	r3, r2
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d116      	bne.n	8003d66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003d38:	4a1f      	ldr	r2, [pc, #124]	@ (8003db8 <chk_lock+0xb4>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	4413      	add	r3, r2
 8003d40:	3304      	adds	r3, #4
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d10c      	bne.n	8003d66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003db8 <chk_lock+0xb4>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	4413      	add	r3, r2
 8003d54:	3308      	adds	r3, #8
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d102      	bne.n	8003d66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003d60:	e007      	b.n	8003d72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d9d2      	bls.n	8003d18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d109      	bne.n	8003d8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <chk_lock+0x80>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d101      	bne.n	8003d88 <chk_lock+0x84>
 8003d84:	2300      	movs	r3, #0
 8003d86:	e010      	b.n	8003daa <chk_lock+0xa6>
 8003d88:	2312      	movs	r3, #18
 8003d8a:	e00e      	b.n	8003daa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d108      	bne.n	8003da4 <chk_lock+0xa0>
 8003d92:	4a09      	ldr	r2, [pc, #36]	@ (8003db8 <chk_lock+0xb4>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da2:	d101      	bne.n	8003da8 <chk_lock+0xa4>
 8003da4:	2310      	movs	r3, #16
 8003da6:	e000      	b.n	8003daa <chk_lock+0xa6>
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	2000052c 	.word	0x2000052c

08003dbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	e002      	b.n	8003dce <enq_lock+0x12>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d806      	bhi.n	8003de2 <enq_lock+0x26>
 8003dd4:	4a09      	ldr	r2, [pc, #36]	@ (8003dfc <enq_lock+0x40>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	4413      	add	r3, r2
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f2      	bne.n	8003dc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000052c 	.word	0x2000052c

08003e00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e01f      	b.n	8003e50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003e10:	4a41      	ldr	r2, [pc, #260]	@ (8003f18 <inc_lock+0x118>)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	4413      	add	r3, r2
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d113      	bne.n	8003e4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003e22:	4a3d      	ldr	r2, [pc, #244]	@ (8003f18 <inc_lock+0x118>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	4413      	add	r3, r2
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d109      	bne.n	8003e4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003e36:	4a38      	ldr	r2, [pc, #224]	@ (8003f18 <inc_lock+0x118>)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3308      	adds	r3, #8
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d006      	beq.n	8003e58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d9dc      	bls.n	8003e10 <inc_lock+0x10>
 8003e56:	e000      	b.n	8003e5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003e58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d132      	bne.n	8003ec6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e002      	b.n	8003e6c <inc_lock+0x6c>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d806      	bhi.n	8003e80 <inc_lock+0x80>
 8003e72:	4a29      	ldr	r2, [pc, #164]	@ (8003f18 <inc_lock+0x118>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	4413      	add	r3, r2
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f2      	bne.n	8003e66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d101      	bne.n	8003e8a <inc_lock+0x8a>
 8003e86:	2300      	movs	r3, #0
 8003e88:	e040      	b.n	8003f0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4922      	ldr	r1, [pc, #136]	@ (8003f18 <inc_lock+0x118>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	440b      	add	r3, r1
 8003e96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	491e      	ldr	r1, [pc, #120]	@ (8003f18 <inc_lock+0x118>)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	491a      	ldr	r1, [pc, #104]	@ (8003f18 <inc_lock+0x118>)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003eb8:	4a17      	ldr	r2, [pc, #92]	@ (8003f18 <inc_lock+0x118>)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	4413      	add	r3, r2
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <inc_lock+0xe0>
 8003ecc:	4a12      	ldr	r2, [pc, #72]	@ (8003f18 <inc_lock+0x118>)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	4413      	add	r3, r2
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <inc_lock+0xe0>
 8003edc:	2300      	movs	r3, #0
 8003ede:	e015      	b.n	8003f0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d108      	bne.n	8003ef8 <inc_lock+0xf8>
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8003f18 <inc_lock+0x118>)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	4413      	add	r3, r2
 8003eee:	330c      	adds	r3, #12
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	e001      	b.n	8003efc <inc_lock+0xfc>
 8003ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003efc:	4906      	ldr	r1, [pc, #24]	@ (8003f18 <inc_lock+0x118>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	440b      	add	r3, r1
 8003f04:	330c      	adds	r3, #12
 8003f06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3301      	adds	r3, #1
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	2000052c 	.word	0x2000052c

08003f1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d825      	bhi.n	8003f7c <dec_lock+0x60>
		n = Files[i].ctr;
 8003f30:	4a17      	ldr	r2, [pc, #92]	@ (8003f90 <dec_lock+0x74>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	4413      	add	r3, r2
 8003f38:	330c      	adds	r3, #12
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003f3e:	89fb      	ldrh	r3, [r7, #14]
 8003f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f44:	d101      	bne.n	8003f4a <dec_lock+0x2e>
 8003f46:	2300      	movs	r3, #0
 8003f48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003f4a:	89fb      	ldrh	r3, [r7, #14]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <dec_lock+0x3a>
 8003f50:	89fb      	ldrh	r3, [r7, #14]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003f56:	4a0e      	ldr	r2, [pc, #56]	@ (8003f90 <dec_lock+0x74>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	4413      	add	r3, r2
 8003f5e:	330c      	adds	r3, #12
 8003f60:	89fa      	ldrh	r2, [r7, #14]
 8003f62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003f64:	89fb      	ldrh	r3, [r7, #14]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <dec_lock+0x5a>
 8003f6a:	4a09      	ldr	r2, [pc, #36]	@ (8003f90 <dec_lock+0x74>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	4413      	add	r3, r2
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	737b      	strb	r3, [r7, #13]
 8003f7a:	e001      	b.n	8003f80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003f80:	7b7b      	ldrb	r3, [r7, #13]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	2000052c 	.word	0x2000052c

08003f94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e010      	b.n	8003fc4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd8 <clear_lock+0x44>)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4413      	add	r3, r2
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d105      	bne.n	8003fbe <clear_lock+0x2a>
 8003fb2:	4a09      	ldr	r2, [pc, #36]	@ (8003fd8 <clear_lock+0x44>)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4413      	add	r3, r2
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d9eb      	bls.n	8003fa2 <clear_lock+0xe>
	}
}
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	2000052c 	.word	0x2000052c

08003fdc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	78db      	ldrb	r3, [r3, #3]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d034      	beq.n	800405a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7858      	ldrb	r0, [r3, #1]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004000:	2301      	movs	r3, #1
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	f7ff fd40 	bl	8003a88 <disk_write>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <sync_window+0x38>
			res = FR_DISK_ERR;
 800400e:	2301      	movs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	e022      	b.n	800405a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	1ad2      	subs	r2, r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	429a      	cmp	r2, r3
 8004028:	d217      	bcs.n	800405a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e010      	b.n	8004054 <sync_window+0x78>
					wsect += fs->fsize;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4413      	add	r3, r2
 800403a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	7858      	ldrb	r0, [r3, #1]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004046:	2301      	movs	r3, #1
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	f7ff fd1d 	bl	8003a88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	3b01      	subs	r3, #1
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d8eb      	bhi.n	8004032 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d01b      	beq.n	80040b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff ffad 	bl	8003fdc <sync_window>
 8004082:	4603      	mov	r3, r0
 8004084:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d113      	bne.n	80040b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	7858      	ldrb	r0, [r3, #1]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004096:	2301      	movs	r3, #1
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	f7ff fcd5 	bl	8003a48 <disk_read>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d004      	beq.n	80040ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff87 	bl	8003fdc <sync_window>
 80040ce:	4603      	mov	r3, r0
 80040d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d158      	bne.n	800418a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d148      	bne.n	8004172 <sync_fs+0xb2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	791b      	ldrb	r3, [r3, #4]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d144      	bne.n	8004172 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3330      	adds	r3, #48	@ 0x30
 80040ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fda9 	bl	8003c4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3330      	adds	r3, #48	@ 0x30
 80040fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004100:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fd38 	bl	8003b7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3330      	adds	r3, #48	@ 0x30
 800410e:	4921      	ldr	r1, [pc, #132]	@ (8004194 <sync_fs+0xd4>)
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fd4d 	bl	8003bb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3330      	adds	r3, #48	@ 0x30
 800411a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800411e:	491e      	ldr	r1, [pc, #120]	@ (8004198 <sync_fs+0xd8>)
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fd45 	bl	8003bb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3330      	adds	r3, #48	@ 0x30
 800412a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f7ff fd3b 	bl	8003bb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3330      	adds	r3, #48	@ 0x30
 800413e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f7ff fd31 	bl	8003bb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7858      	ldrb	r0, [r3, #1]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004166:	2301      	movs	r3, #1
 8004168:	f7ff fc8e 	bl	8003a88 <disk_write>
			fs->fsi_flag = 0;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	2200      	movs	r2, #0
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fca4 	bl	8003ac8 <disk_ioctl>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <sync_fs+0xca>
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	41615252 	.word	0x41615252
 8004198:	61417272 	.word	0x61417272

0800419c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	3b02      	subs	r3, #2
 80041aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	3b02      	subs	r3, #2
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d301      	bcc.n	80041bc <clust2sect+0x20>
 80041b8:	2300      	movs	r3, #0
 80041ba:	e008      	b.n	80041ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	895b      	ldrh	r3, [r3, #10]
 80041c0:	461a      	mov	r2, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	fb03 f202 	mul.w	r2, r3, r2
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	4413      	add	r3, r2
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d904      	bls.n	80041fa <get_fat+0x20>
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d302      	bcc.n	8004200 <get_fat+0x26>
		val = 1;	/* Internal error */
 80041fa:	2301      	movs	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e08e      	b.n	800431e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004200:	f04f 33ff 	mov.w	r3, #4294967295
 8004204:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d061      	beq.n	80042d2 <get_fat+0xf8>
 800420e:	2b03      	cmp	r3, #3
 8004210:	dc7b      	bgt.n	800430a <get_fat+0x130>
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <get_fat+0x42>
 8004216:	2b02      	cmp	r3, #2
 8004218:	d041      	beq.n	800429e <get_fat+0xc4>
 800421a:	e076      	b.n	800430a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	0a5b      	lsrs	r3, r3, #9
 8004232:	4413      	add	r3, r2
 8004234:	4619      	mov	r1, r3
 8004236:	6938      	ldr	r0, [r7, #16]
 8004238:	f7ff ff14 	bl	8004064 <move_window>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d166      	bne.n	8004310 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	60fa      	str	r2, [r7, #12]
 8004248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004254:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	0a5b      	lsrs	r3, r3, #9
 800425e:	4413      	add	r3, r2
 8004260:	4619      	mov	r1, r3
 8004262:	6938      	ldr	r0, [r7, #16]
 8004264:	f7ff fefe 	bl	8004064 <move_window>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d152      	bne.n	8004314 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4313      	orrs	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <get_fat+0xba>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	e002      	b.n	800429a <get_fat+0xc0>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429a:	617b      	str	r3, [r7, #20]
			break;
 800429c:	e03f      	b.n	800431e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	4413      	add	r3, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	6938      	ldr	r0, [r7, #16]
 80042ac:	f7ff feda 	bl	8004064 <move_window>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d130      	bne.n	8004318 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80042c4:	4413      	add	r3, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fc1c 	bl	8003b04 <ld_word>
 80042cc:	4603      	mov	r3, r0
 80042ce:	617b      	str	r3, [r7, #20]
			break;
 80042d0:	e025      	b.n	800431e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	09db      	lsrs	r3, r3, #7
 80042da:	4413      	add	r3, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	6938      	ldr	r0, [r7, #16]
 80042e0:	f7ff fec0 	bl	8004064 <move_window>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d118      	bne.n	800431c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80042f8:	4413      	add	r3, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fc1a 	bl	8003b34 <ld_dword>
 8004300:	4603      	mov	r3, r0
 8004302:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004306:	617b      	str	r3, [r7, #20]
			break;
 8004308:	e009      	b.n	800431e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800430a:	2301      	movs	r3, #1
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e006      	b.n	800431e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004310:	bf00      	nop
 8004312:	e004      	b.n	800431e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004314:	bf00      	nop
 8004316:	e002      	b.n	800431e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800431c:	bf00      	nop
		}
	}

	return val;
 800431e:	697b      	ldr	r3, [r7, #20]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b089      	sub	sp, #36	@ 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004334:	2302      	movs	r3, #2
 8004336:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b01      	cmp	r3, #1
 800433c:	f240 80d9 	bls.w	80044f2 <put_fat+0x1ca>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	f080 80d3 	bcs.w	80044f2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b03      	cmp	r3, #3
 8004352:	f000 8096 	beq.w	8004482 <put_fat+0x15a>
 8004356:	2b03      	cmp	r3, #3
 8004358:	f300 80cb 	bgt.w	80044f2 <put_fat+0x1ca>
 800435c:	2b01      	cmp	r3, #1
 800435e:	d002      	beq.n	8004366 <put_fat+0x3e>
 8004360:	2b02      	cmp	r3, #2
 8004362:	d06e      	beq.n	8004442 <put_fat+0x11a>
 8004364:	e0c5      	b.n	80044f2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4413      	add	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	0a5b      	lsrs	r3, r3, #9
 800437c:	4413      	add	r3, r2
 800437e:	4619      	mov	r1, r3
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff fe6f 	bl	8004064 <move_window>
 8004386:	4603      	mov	r3, r0
 8004388:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800438a:	7ffb      	ldrb	r3, [r7, #31]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 80a9 	bne.w	80044e4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	61b9      	str	r1, [r7, #24]
 800439e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a2:	4413      	add	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00d      	beq.n	80043cc <put_fat+0xa4>
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b25b      	sxtb	r3, r3
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	b25a      	sxtb	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	b25b      	sxtb	r3, r3
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b25b      	sxtb	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e001      	b.n	80043d0 <put_fat+0xa8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1a      	ldr	r2, [r3, #32]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	0a5b      	lsrs	r3, r3, #9
 80043e2:	4413      	add	r3, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff fe3c 	bl	8004064 <move_window>
 80043ec:	4603      	mov	r3, r0
 80043ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043f0:	7ffb      	ldrb	r3, [r7, #31]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d178      	bne.n	80044e8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	4413      	add	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <put_fat+0xf0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e00e      	b.n	8004436 <put_fat+0x10e>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	b25b      	sxtb	r3, r3
 800441e:	f023 030f 	bic.w	r3, r3, #15
 8004422:	b25a      	sxtb	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	b25b      	sxtb	r3, r3
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	b25b      	sxtb	r3, r3
 8004430:	4313      	orrs	r3, r2
 8004432:	b25b      	sxtb	r3, r3
 8004434:	b2db      	uxtb	r3, r3
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	70da      	strb	r2, [r3, #3]
			break;
 8004440:	e057      	b.n	80044f2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	4413      	add	r3, r2
 800444c:	4619      	mov	r1, r3
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7ff fe08 	bl	8004064 <move_window>
 8004454:	4603      	mov	r3, r0
 8004456:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d146      	bne.n	80044ec <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800446c:	4413      	add	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	b292      	uxth	r2, r2
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fb80 	bl	8003b7a <st_word>
			fs->wflag = 1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	70da      	strb	r2, [r3, #3]
			break;
 8004480:	e037      	b.n	80044f2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	09db      	lsrs	r3, r3, #7
 800448a:	4413      	add	r3, r2
 800448c:	4619      	mov	r1, r3
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff fde8 	bl	8004064 <move_window>
 8004494:	4603      	mov	r3, r0
 8004496:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004498:	7ffb      	ldrb	r3, [r7, #31]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d128      	bne.n	80044f0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80044b2:	4413      	add	r3, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fb3d 	bl	8003b34 <ld_dword>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80044c0:	4323      	orrs	r3, r4
 80044c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80044d2:	4413      	add	r3, r2
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fb6a 	bl	8003bb0 <st_dword>
			fs->wflag = 1;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	70da      	strb	r2, [r3, #3]
			break;
 80044e2:	e006      	b.n	80044f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80044e4:	bf00      	nop
 80044e6:	e004      	b.n	80044f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80044f0:	bf00      	nop
		}
	}
	return res;
 80044f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3724      	adds	r7, #36	@ 0x24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd90      	pop	{r4, r7, pc}

080044fc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d904      	bls.n	8004522 <remove_chain+0x26>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d301      	bcc.n	8004526 <remove_chain+0x2a>
 8004522:	2302      	movs	r3, #2
 8004524:	e04b      	b.n	80045be <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00c      	beq.n	8004546 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	69b8      	ldr	r0, [r7, #24]
 8004534:	f7ff fef8 	bl	8004328 <put_fat>
 8004538:	4603      	mov	r3, r0
 800453a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800453c:	7ffb      	ldrb	r3, [r7, #31]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <remove_chain+0x4a>
 8004542:	7ffb      	ldrb	r3, [r7, #31]
 8004544:	e03b      	b.n	80045be <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fe46 	bl	80041da <get_fat>
 800454e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d031      	beq.n	80045ba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <remove_chain+0x64>
 800455c:	2302      	movs	r3, #2
 800455e:	e02e      	b.n	80045be <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004566:	d101      	bne.n	800456c <remove_chain+0x70>
 8004568:	2301      	movs	r3, #1
 800456a:	e028      	b.n	80045be <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800456c:	2200      	movs	r2, #0
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	69b8      	ldr	r0, [r7, #24]
 8004572:	f7ff fed9 	bl	8004328 <put_fat>
 8004576:	4603      	mov	r3, r0
 8004578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <remove_chain+0x88>
 8004580:	7ffb      	ldrb	r3, [r7, #31]
 8004582:	e01c      	b.n	80045be <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	3b02      	subs	r3, #2
 800458e:	429a      	cmp	r2, r3
 8004590:	d20b      	bcs.n	80045aa <remove_chain+0xae>
			fs->free_clst++;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	791b      	ldrb	r3, [r3, #4]
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d3c6      	bcc.n	8004546 <remove_chain+0x4a>
 80045b8:	e000      	b.n	80045bc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80045ba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b088      	sub	sp, #32
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10d      	bne.n	80045f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d004      	beq.n	80045f2 <create_chain+0x2c>
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d31b      	bcc.n	800462a <create_chain+0x64>
 80045f2:	2301      	movs	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e018      	b.n	800462a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff fded 	bl	80041da <get_fat>
 8004600:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d801      	bhi.n	800460c <create_chain+0x46>
 8004608:	2301      	movs	r3, #1
 800460a:	e070      	b.n	80046ee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d101      	bne.n	8004618 <create_chain+0x52>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	e06a      	b.n	80046ee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	429a      	cmp	r2, r3
 8004620:	d201      	bcs.n	8004626 <create_chain+0x60>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	e063      	b.n	80046ee <create_chain+0x128>
		scl = clst;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	429a      	cmp	r2, r3
 800463c:	d307      	bcc.n	800464e <create_chain+0x88>
				ncl = 2;
 800463e:	2302      	movs	r3, #2
 8004640:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	429a      	cmp	r2, r3
 8004648:	d901      	bls.n	800464e <create_chain+0x88>
 800464a:	2300      	movs	r3, #0
 800464c:	e04f      	b.n	80046ee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800464e:	69f9      	ldr	r1, [r7, #28]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff fdc2 	bl	80041da <get_fat>
 8004656:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00e      	beq.n	800467c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d003      	beq.n	800466c <create_chain+0xa6>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d101      	bne.n	8004670 <create_chain+0xaa>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	e03e      	b.n	80046ee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	429a      	cmp	r2, r3
 8004676:	d1da      	bne.n	800462e <create_chain+0x68>
 8004678:	2300      	movs	r3, #0
 800467a:	e038      	b.n	80046ee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800467c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800467e:	f04f 32ff 	mov.w	r2, #4294967295
 8004682:	69f9      	ldr	r1, [r7, #28]
 8004684:	6938      	ldr	r0, [r7, #16]
 8004686:	f7ff fe4f 	bl	8004328 <put_fat>
 800468a:	4603      	mov	r3, r0
 800468c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800468e:	7dfb      	ldrb	r3, [r7, #23]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <create_chain+0xe2>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	6938      	ldr	r0, [r7, #16]
 80046a0:	f7ff fe42 	bl	8004328 <put_fat>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <create_chain+0x116>
		fs->last_clst = ncl;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	3b02      	subs	r3, #2
 80046be:	429a      	cmp	r2, r3
 80046c0:	d804      	bhi.n	80046cc <create_chain+0x106>
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	1e5a      	subs	r2, r3, #1
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	791b      	ldrb	r3, [r3, #4]
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	711a      	strb	r2, [r3, #4]
 80046da:	e007      	b.n	80046ec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <create_chain+0x122>
 80046e2:	f04f 33ff 	mov.w	r3, #4294967295
 80046e6:	e000      	b.n	80046ea <create_chain+0x124>
 80046e8:	2301      	movs	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80046ec:	69fb      	ldr	r3, [r7, #28]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b087      	sub	sp, #28
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	3304      	adds	r3, #4
 800470c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	0a5b      	lsrs	r3, r3, #9
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	8952      	ldrh	r2, [r2, #10]
 8004716:	fbb3 f3f2 	udiv	r3, r3, r2
 800471a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1d1a      	adds	r2, r3, #4
 8004720:	613a      	str	r2, [r7, #16]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <clmt_clust+0x3a>
 800472c:	2300      	movs	r3, #0
 800472e:	e010      	b.n	8004752 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	d307      	bcc.n	8004748 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	3304      	adds	r3, #4
 8004744:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004746:	e7e9      	b.n	800471c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004748:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	4413      	add	r3, r2
}
 8004752:	4618      	mov	r0, r3
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b086      	sub	sp, #24
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004774:	d204      	bcs.n	8004780 <dir_sdi+0x22>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004780:	2302      	movs	r3, #2
 8004782:	e063      	b.n	800484c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <dir_sdi+0x46>
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d902      	bls.n	80047a4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	8912      	ldrh	r2, [r2, #8]
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d301      	bcc.n	80047ba <dir_sdi+0x5c>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e048      	b.n	800484c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	61da      	str	r2, [r3, #28]
 80047c2:	e029      	b.n	8004818 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	895b      	ldrh	r3, [r3, #10]
 80047c8:	025b      	lsls	r3, r3, #9
 80047ca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80047cc:	e019      	b.n	8004802 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6979      	ldr	r1, [r7, #20]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fd01 	bl	80041da <get_fat>
 80047d8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d101      	bne.n	80047e6 <dir_sdi+0x88>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e032      	b.n	800484c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d904      	bls.n	80047f6 <dir_sdi+0x98>
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d301      	bcc.n	80047fa <dir_sdi+0x9c>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e028      	b.n	800484c <dir_sdi+0xee>
			ofs -= csz;
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	429a      	cmp	r2, r3
 8004808:	d2e1      	bcs.n	80047ce <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800480a:	6979      	ldr	r1, [r7, #20]
 800480c:	6938      	ldr	r0, [r7, #16]
 800480e:	f7ff fcc5 	bl	800419c <clust2sect>
 8004812:	4602      	mov	r2, r0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <dir_sdi+0xcc>
 8004826:	2302      	movs	r3, #2
 8004828:	e010      	b.n	800484c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	0a5b      	lsrs	r3, r3, #9
 8004832:	441a      	add	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	3320      	adds	r3, #32
 800486a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <dir_next+0x28>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800487a:	d301      	bcc.n	8004880 <dir_next+0x2c>
 800487c:	2304      	movs	r3, #4
 800487e:	e0aa      	b.n	80049d6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 8098 	bne.w	80049bc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10b      	bne.n	80048b6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	8912      	ldrh	r2, [r2, #8]
 80048a6:	4293      	cmp	r3, r2
 80048a8:	f0c0 8088 	bcc.w	80049bc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	61da      	str	r2, [r3, #28]
 80048b2:	2304      	movs	r3, #4
 80048b4:	e08f      	b.n	80049d6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	0a5b      	lsrs	r3, r3, #9
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	8952      	ldrh	r2, [r2, #10]
 80048be:	3a01      	subs	r2, #1
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d17a      	bne.n	80049bc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f7ff fc83 	bl	80041da <get_fat>
 80048d4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d801      	bhi.n	80048e0 <dir_next+0x8c>
 80048dc:	2302      	movs	r3, #2
 80048de:	e07a      	b.n	80049d6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e6:	d101      	bne.n	80048ec <dir_next+0x98>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e074      	b.n	80049d6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d358      	bcc.n	80049a8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	61da      	str	r2, [r3, #28]
 8004902:	2304      	movs	r3, #4
 8004904:	e067      	b.n	80049d6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f7ff fe59 	bl	80045c6 <create_chain>
 8004914:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <dir_next+0xcc>
 800491c:	2307      	movs	r3, #7
 800491e:	e05a      	b.n	80049d6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <dir_next+0xd6>
 8004926:	2302      	movs	r3, #2
 8004928:	e055      	b.n	80049d6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d101      	bne.n	8004936 <dir_next+0xe2>
 8004932:	2301      	movs	r3, #1
 8004934:	e04f      	b.n	80049d6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7ff fb50 	bl	8003fdc <sync_window>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <dir_next+0xf2>
 8004942:	2301      	movs	r3, #1
 8004944:	e047      	b.n	80049d6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3330      	adds	r3, #48	@ 0x30
 800494a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff f97a 	bl	8003c4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	6979      	ldr	r1, [r7, #20]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff fc1d 	bl	800419c <clust2sect>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004968:	e012      	b.n	8004990 <dir_next+0x13c>
						fs->wflag = 1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff fb33 	bl	8003fdc <sync_window>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <dir_next+0x12c>
 800497c:	2301      	movs	r3, #1
 800497e:	e02a      	b.n	80049d6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	3301      	adds	r3, #1
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	895b      	ldrh	r3, [r3, #10]
 8004994:	461a      	mov	r2, r3
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4293      	cmp	r3, r2
 800499a:	d3e6      	bcc.n	800496a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80049ae:	6979      	ldr	r1, [r7, #20]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7ff fbf3 	bl	800419c <clust2sect>
 80049b6:	4602      	mov	r2, r0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ce:	441a      	add	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80049ee:	2100      	movs	r1, #0
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff feb4 	bl	800475e <dir_sdi>
 80049f6:	4603      	mov	r3, r0
 80049f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d12b      	bne.n	8004a58 <dir_alloc+0x7a>
		n = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff fb2a 	bl	8004064 <move_window>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2be5      	cmp	r3, #229	@ 0xe5
 8004a22:	d004      	beq.n	8004a2e <dir_alloc+0x50>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d107      	bne.n	8004a3e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	3301      	adds	r3, #1
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d102      	bne.n	8004a42 <dir_alloc+0x64>
 8004a3c:	e00c      	b.n	8004a58 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004a42:	2101      	movs	r1, #1
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ff05 	bl	8004854 <dir_next>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0d7      	beq.n	8004a04 <dir_alloc+0x26>
 8004a54:	e000      	b.n	8004a58 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004a56:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d101      	bne.n	8004a62 <dir_alloc+0x84>
 8004a5e:	2307      	movs	r3, #7
 8004a60:	75fb      	strb	r3, [r7, #23]
	return res;
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	331a      	adds	r3, #26
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff f842 	bl	8003b04 <ld_word>
 8004a80:	4603      	mov	r3, r0
 8004a82:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d109      	bne.n	8004aa0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	3314      	adds	r3, #20
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff f837 	bl	8003b04 <ld_word>
 8004a96:	4603      	mov	r3, r0
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	331a      	adds	r3, #26
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	b292      	uxth	r2, r2
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff f85a 	bl	8003b7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d109      	bne.n	8004ae2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f103 0214 	add.w	r2, r3, #20
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7ff f84c 	bl	8003b7a <st_word>
	}
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004af8:	2100      	movs	r1, #0
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fe2f 	bl	800475e <dir_sdi>
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <dir_find+0x24>
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	e03e      	b.n	8004b8c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4619      	mov	r1, r3
 8004b14:	6938      	ldr	r0, [r7, #16]
 8004b16:	f7ff faa5 	bl	8004064 <move_window>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d12f      	bne.n	8004b84 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <dir_find+0x4e>
 8004b32:	2304      	movs	r3, #4
 8004b34:	75fb      	strb	r3, [r7, #23]
 8004b36:	e028      	b.n	8004b8a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	330b      	adds	r3, #11
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	330b      	adds	r3, #11
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <dir_find+0x86>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a18      	ldr	r0, [r3, #32]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3324      	adds	r3, #36	@ 0x24
 8004b62:	220b      	movs	r2, #11
 8004b64:	4619      	mov	r1, r3
 8004b66:	f7ff f88b 	bl	8003c80 <mem_cmp>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004b70:	2100      	movs	r1, #0
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff fe6e 	bl	8004854 <dir_next>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0c5      	beq.n	8004b0e <dir_find+0x24>
 8004b82:	e002      	b.n	8004b8a <dir_find+0xa0>
		if (res != FR_OK) break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004b88:	bf00      	nop

	return res;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ff1a 	bl	80049de <dir_alloc>
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d11c      	bne.n	8004bee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68b8      	ldr	r0, [r7, #8]
 8004bbc:	f7ff fa52 	bl	8004064 <move_window>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d111      	bne.n	8004bee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff f839 	bl	8003c4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a18      	ldr	r0, [r3, #32]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3324      	adds	r3, #36	@ 0x24
 8004be0:	220b      	movs	r2, #11
 8004be2:	4619      	mov	r1, r3
 8004be4:	f7ff f810 	bl	8003c08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2201      	movs	r2, #1
 8004bec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3324      	adds	r3, #36	@ 0x24
 8004c0c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004c0e:	220b      	movs	r2, #11
 8004c10:	2120      	movs	r1, #32
 8004c12:	68b8      	ldr	r0, [r7, #8]
 8004c14:	f7ff f819 	bl	8003c4a <mem_set>
	si = i = 0; ni = 8;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	2308      	movs	r3, #8
 8004c22:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	61fa      	str	r2, [r7, #28]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004c32:	7efb      	ldrb	r3, [r7, #27]
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d94e      	bls.n	8004cd6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004c38:	7efb      	ldrb	r3, [r7, #27]
 8004c3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8004c3c:	d006      	beq.n	8004c4c <create_name+0x54>
 8004c3e:	7efb      	ldrb	r3, [r7, #27]
 8004c40:	2b5c      	cmp	r3, #92	@ 0x5c
 8004c42:	d110      	bne.n	8004c66 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004c44:	e002      	b.n	8004c4c <create_name+0x54>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b2f      	cmp	r3, #47	@ 0x2f
 8004c56:	d0f6      	beq.n	8004c46 <create_name+0x4e>
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b5c      	cmp	r3, #92	@ 0x5c
 8004c62:	d0f0      	beq.n	8004c46 <create_name+0x4e>
			break;
 8004c64:	e038      	b.n	8004cd8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004c66:	7efb      	ldrb	r3, [r7, #27]
 8004c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c6a:	d003      	beq.n	8004c74 <create_name+0x7c>
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d30c      	bcc.n	8004c8e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b0b      	cmp	r3, #11
 8004c78:	d002      	beq.n	8004c80 <create_name+0x88>
 8004c7a:	7efb      	ldrb	r3, [r7, #27]
 8004c7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c7e:	d001      	beq.n	8004c84 <create_name+0x8c>
 8004c80:	2306      	movs	r3, #6
 8004c82:	e044      	b.n	8004d0e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004c84:	2308      	movs	r3, #8
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	230b      	movs	r3, #11
 8004c8a:	617b      	str	r3, [r7, #20]
			continue;
 8004c8c:	e022      	b.n	8004cd4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004c8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	da04      	bge.n	8004ca0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004c96:	7efb      	ldrb	r3, [r7, #27]
 8004c98:	3b80      	subs	r3, #128	@ 0x80
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d18 <create_name+0x120>)
 8004c9c:	5cd3      	ldrb	r3, [r2, r3]
 8004c9e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004ca0:	7efb      	ldrb	r3, [r7, #27]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	481d      	ldr	r0, [pc, #116]	@ (8004d1c <create_name+0x124>)
 8004ca6:	f7ff f812 	bl	8003cce <chk_chr>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <create_name+0xbc>
 8004cb0:	2306      	movs	r3, #6
 8004cb2:	e02c      	b.n	8004d0e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004cb4:	7efb      	ldrb	r3, [r7, #27]
 8004cb6:	2b60      	cmp	r3, #96	@ 0x60
 8004cb8:	d905      	bls.n	8004cc6 <create_name+0xce>
 8004cba:	7efb      	ldrb	r3, [r7, #27]
 8004cbc:	2b7a      	cmp	r3, #122	@ 0x7a
 8004cbe:	d802      	bhi.n	8004cc6 <create_name+0xce>
 8004cc0:	7efb      	ldrb	r3, [r7, #27]
 8004cc2:	3b20      	subs	r3, #32
 8004cc4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	613a      	str	r2, [r7, #16]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4413      	add	r3, r2
 8004cd0:	7efa      	ldrb	r2, [r7, #27]
 8004cd2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004cd4:	e7a6      	b.n	8004c24 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004cd6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	441a      	add	r2, r3
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <create_name+0xf4>
 8004ce8:	2306      	movs	r3, #6
 8004cea:	e010      	b.n	8004d0e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2be5      	cmp	r3, #229	@ 0xe5
 8004cf2:	d102      	bne.n	8004cfa <create_name+0x102>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2205      	movs	r2, #5
 8004cf8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004cfa:	7efb      	ldrb	r3, [r7, #27]
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d801      	bhi.n	8004d04 <create_name+0x10c>
 8004d00:	2204      	movs	r2, #4
 8004d02:	e000      	b.n	8004d06 <create_name+0x10e>
 8004d04:	2200      	movs	r2, #0
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	330b      	adds	r3, #11
 8004d0a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004d0c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	08005e30 	.word	0x08005e30
 8004d1c:	08005dc8 	.word	0x08005dc8

08004d20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004d34:	e002      	b.n	8004d3c <follow_path+0x1c>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b2f      	cmp	r3, #47	@ 0x2f
 8004d42:	d0f8      	beq.n	8004d36 <follow_path+0x16>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b5c      	cmp	r3, #92	@ 0x5c
 8004d4a:	d0f4      	beq.n	8004d36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b1f      	cmp	r3, #31
 8004d58:	d80a      	bhi.n	8004d70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2280      	movs	r2, #128	@ 0x80
 8004d5e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004d62:	2100      	movs	r1, #0
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fcfa 	bl	800475e <dir_sdi>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	75fb      	strb	r3, [r7, #23]
 8004d6e:	e043      	b.n	8004df8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d70:	463b      	mov	r3, r7
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff3f 	bl	8004bf8 <create_name>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d134      	bne.n	8004dee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff feb0 	bl	8004aea <dir_find>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d127      	bne.n	8004df2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004da2:	7afb      	ldrb	r3, [r7, #11]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d122      	bne.n	8004df2 <follow_path+0xd2>
 8004dac:	2305      	movs	r3, #5
 8004dae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004db0:	e01f      	b.n	8004df2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004db2:	7afb      	ldrb	r3, [r7, #11]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d11c      	bne.n	8004df6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	799b      	ldrb	r3, [r3, #6]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004dc8:	2305      	movs	r3, #5
 8004dca:	75fb      	strb	r3, [r7, #23]
 8004dcc:	e014      	b.n	8004df8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ddc:	4413      	add	r3, r2
 8004dde:	4619      	mov	r1, r3
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7ff fe43 	bl	8004a6c <ld_clust>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004dec:	e7c0      	b.n	8004d70 <follow_path+0x50>
			if (res != FR_OK) break;
 8004dee:	bf00      	nop
 8004df0:	e002      	b.n	8004df8 <follow_path+0xd8>
				break;
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004df6:	bf00      	nop
			}
		}
	}

	return res;
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b087      	sub	sp, #28
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d031      	beq.n	8004e7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e002      	b.n	8004e26 <get_ldnumber+0x24>
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	3301      	adds	r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d903      	bls.n	8004e36 <get_ldnumber+0x34>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b3a      	cmp	r3, #58	@ 0x3a
 8004e34:	d1f4      	bne.n	8004e20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b3a      	cmp	r3, #58	@ 0x3a
 8004e3c:	d11c      	bne.n	8004e78 <get_ldnumber+0x76>
			tp = *path;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	60fa      	str	r2, [r7, #12]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	3b30      	subs	r3, #48	@ 0x30
 8004e4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b09      	cmp	r3, #9
 8004e54:	d80e      	bhi.n	8004e74 <get_ldnumber+0x72>
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d10a      	bne.n	8004e74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <get_ldnumber+0x72>
					vol = (int)i;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	e002      	b.n	8004e7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004e7c:	693b      	ldr	r3, [r7, #16]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	70da      	strb	r2, [r3, #3]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff f8dc 	bl	8004064 <move_window>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <check_fs+0x2a>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e038      	b.n	8004f28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3330      	adds	r3, #48	@ 0x30
 8004eba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe fe20 	bl	8003b04 <ld_word>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <check_fs+0x48>
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e029      	b.n	8004f28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004eda:	2be9      	cmp	r3, #233	@ 0xe9
 8004edc:	d009      	beq.n	8004ef2 <check_fs+0x66>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ee4:	2beb      	cmp	r3, #235	@ 0xeb
 8004ee6:	d11e      	bne.n	8004f26 <check_fs+0x9a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004eee:	2b90      	cmp	r3, #144	@ 0x90
 8004ef0:	d119      	bne.n	8004f26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3330      	adds	r3, #48	@ 0x30
 8004ef6:	3336      	adds	r3, #54	@ 0x36
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe fe1b 	bl	8003b34 <ld_dword>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f04:	4a0a      	ldr	r2, [pc, #40]	@ (8004f30 <check_fs+0xa4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <check_fs+0x82>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e00c      	b.n	8004f28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3330      	adds	r3, #48	@ 0x30
 8004f12:	3352      	adds	r3, #82	@ 0x52
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fe0d 	bl	8003b34 <ld_dword>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4a05      	ldr	r2, [pc, #20]	@ (8004f34 <check_fs+0xa8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <check_fs+0x9a>
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004f26:	2302      	movs	r3, #2
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	00544146 	.word	0x00544146
 8004f34:	33544146 	.word	0x33544146

08004f38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b096      	sub	sp, #88	@ 0x58
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	4613      	mov	r3, r2
 8004f44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff ff58 	bl	8004e02 <get_ldnumber>
 8004f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	da01      	bge.n	8004f5e <find_volume+0x26>
 8004f5a:	230b      	movs	r3, #11
 8004f5c:	e22d      	b.n	80053ba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004f5e:	4aa1      	ldr	r2, [pc, #644]	@ (80051e4 <find_volume+0x2ac>)
 8004f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f66:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <find_volume+0x3a>
 8004f6e:	230c      	movs	r3, #12
 8004f70:	e223      	b.n	80053ba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01a      	beq.n	8004fbe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	785b      	ldrb	r3, [r3, #1]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe fd19 	bl	80039c4 <disk_status>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004f98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10c      	bne.n	8004fbe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <find_volume+0x82>
 8004faa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	e1ff      	b.n	80053ba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e1fd      	b.n	80053ba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe fd11 	bl	80039f8 <disk_initialize>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004fdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e1e6      	b.n	80053ba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d007      	beq.n	8005002 <find_volume+0xca>
 8004ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004ffe:	230a      	movs	r3, #10
 8005000:	e1db      	b.n	80053ba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005006:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005008:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800500a:	f7ff ff3f 	bl	8004e8c <check_fs>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005014:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005018:	2b02      	cmp	r3, #2
 800501a:	d149      	bne.n	80050b0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800501c:	2300      	movs	r3, #0
 800501e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005020:	e01e      	b.n	8005060 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005024:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005030:	4413      	add	r3, r2
 8005032:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	3304      	adds	r3, #4
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d006      	beq.n	800504c <find_volume+0x114>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	3308      	adds	r3, #8
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fd76 	bl	8003b34 <ld_dword>
 8005048:	4602      	mov	r2, r0
 800504a:	e000      	b.n	800504e <find_volume+0x116>
 800504c:	2200      	movs	r2, #0
 800504e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	3358      	adds	r3, #88	@ 0x58
 8005054:	443b      	add	r3, r7
 8005056:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800505a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800505c:	3301      	adds	r3, #1
 800505e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005062:	2b03      	cmp	r3, #3
 8005064:	d9dd      	bls.n	8005022 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005066:	2300      	movs	r3, #0
 8005068:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800506a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <find_volume+0x13e>
 8005070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005072:	3b01      	subs	r3, #1
 8005074:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	3358      	adds	r3, #88	@ 0x58
 800507c:	443b      	add	r3, r7
 800507e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005082:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <find_volume+0x15e>
 800508a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800508c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800508e:	f7ff fefd 	bl	8004e8c <check_fs>
 8005092:	4603      	mov	r3, r0
 8005094:	e000      	b.n	8005098 <find_volume+0x160>
 8005096:	2303      	movs	r3, #3
 8005098:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800509c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d905      	bls.n	80050b0 <find_volume+0x178>
 80050a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050a6:	3301      	adds	r3, #1
 80050a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80050aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d9e2      	bls.n	8005076 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80050b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d101      	bne.n	80050bc <find_volume+0x184>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e17e      	b.n	80053ba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80050bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d901      	bls.n	80050c8 <find_volume+0x190>
 80050c4:	230d      	movs	r3, #13
 80050c6:	e178      	b.n	80053ba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	3330      	adds	r3, #48	@ 0x30
 80050cc:	330b      	adds	r3, #11
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fd18 	bl	8003b04 <ld_word>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050da:	d001      	beq.n	80050e0 <find_volume+0x1a8>
 80050dc:	230d      	movs	r3, #13
 80050de:	e16c      	b.n	80053ba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e2:	3330      	adds	r3, #48	@ 0x30
 80050e4:	3316      	adds	r3, #22
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fd0c 	bl	8003b04 <ld_word>
 80050ec:	4603      	mov	r3, r0
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80050f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <find_volume+0x1cc>
 80050f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f8:	3330      	adds	r3, #48	@ 0x30
 80050fa:	3324      	adds	r3, #36	@ 0x24
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fe fd19 	bl	8003b34 <ld_dword>
 8005102:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005108:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005112:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005116:	789b      	ldrb	r3, [r3, #2]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d005      	beq.n	8005128 <find_volume+0x1f0>
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	789b      	ldrb	r3, [r3, #2]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d001      	beq.n	8005128 <find_volume+0x1f0>
 8005124:	230d      	movs	r3, #13
 8005126:	e148      	b.n	80053ba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	789b      	ldrb	r3, [r3, #2]
 800512c:	461a      	mov	r2, r3
 800512e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005130:	fb02 f303 	mul.w	r3, r2, r3
 8005134:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513c:	461a      	mov	r2, r3
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005144:	895b      	ldrh	r3, [r3, #10]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d008      	beq.n	800515c <find_volume+0x224>
 800514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514c:	895b      	ldrh	r3, [r3, #10]
 800514e:	461a      	mov	r2, r3
 8005150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005152:	895b      	ldrh	r3, [r3, #10]
 8005154:	3b01      	subs	r3, #1
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <find_volume+0x228>
 800515c:	230d      	movs	r3, #13
 800515e:	e12c      	b.n	80053ba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005162:	3330      	adds	r3, #48	@ 0x30
 8005164:	3311      	adds	r3, #17
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fccc 	bl	8003b04 <ld_word>
 800516c:	4603      	mov	r3, r0
 800516e:	461a      	mov	r2, r3
 8005170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005172:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005176:	891b      	ldrh	r3, [r3, #8]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <find_volume+0x24e>
 8005182:	230d      	movs	r3, #13
 8005184:	e119      	b.n	80053ba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005188:	3330      	adds	r3, #48	@ 0x30
 800518a:	3313      	adds	r3, #19
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe fcb9 	bl	8003b04 <ld_word>
 8005192:	4603      	mov	r3, r0
 8005194:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <find_volume+0x272>
 800519c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519e:	3330      	adds	r3, #48	@ 0x30
 80051a0:	3320      	adds	r3, #32
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fcc6 	bl	8003b34 <ld_dword>
 80051a8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	3330      	adds	r3, #48	@ 0x30
 80051ae:	330e      	adds	r3, #14
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe fca7 	bl	8003b04 <ld_word>
 80051b6:	4603      	mov	r3, r0
 80051b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80051ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <find_volume+0x28c>
 80051c0:	230d      	movs	r3, #13
 80051c2:	e0fa      	b.n	80053ba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80051c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80051c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c8:	4413      	add	r3, r2
 80051ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051cc:	8912      	ldrh	r2, [r2, #8]
 80051ce:	0912      	lsrs	r2, r2, #4
 80051d0:	b292      	uxth	r2, r2
 80051d2:	4413      	add	r3, r2
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80051d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	429a      	cmp	r2, r3
 80051dc:	d204      	bcs.n	80051e8 <find_volume+0x2b0>
 80051de:	230d      	movs	r3, #13
 80051e0:	e0eb      	b.n	80053ba <find_volume+0x482>
 80051e2:	bf00      	nop
 80051e4:	20000524 	.word	0x20000524
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80051e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051f0:	8952      	ldrh	r2, [r2, #10]
 80051f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <find_volume+0x2ca>
 80051fe:	230d      	movs	r3, #13
 8005200:	e0db      	b.n	80053ba <find_volume+0x482>
		fmt = FS_FAT32;
 8005202:	2303      	movs	r3, #3
 8005204:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800520e:	4293      	cmp	r3, r2
 8005210:	d802      	bhi.n	8005218 <find_volume+0x2e0>
 8005212:	2302      	movs	r3, #2
 8005214:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800521e:	4293      	cmp	r3, r2
 8005220:	d802      	bhi.n	8005228 <find_volume+0x2f0>
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005232:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005234:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005236:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523a:	441a      	add	r2, r3
 800523c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005240:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	441a      	add	r2, r3
 8005246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005248:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800524a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800524e:	2b03      	cmp	r3, #3
 8005250:	d11e      	bne.n	8005290 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005254:	3330      	adds	r3, #48	@ 0x30
 8005256:	332a      	adds	r3, #42	@ 0x2a
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fc53 	bl	8003b04 <ld_word>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <find_volume+0x330>
 8005264:	230d      	movs	r3, #13
 8005266:	e0a8      	b.n	80053ba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526a:	891b      	ldrh	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <find_volume+0x33c>
 8005270:	230d      	movs	r3, #13
 8005272:	e0a2      	b.n	80053ba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005276:	3330      	adds	r3, #48	@ 0x30
 8005278:	332c      	adds	r3, #44	@ 0x2c
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fc5a 	bl	8003b34 <ld_dword>
 8005280:	4602      	mov	r2, r0
 8005282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005284:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	647b      	str	r3, [r7, #68]	@ 0x44
 800528e:	e01f      	b.n	80052d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005292:	891b      	ldrh	r3, [r3, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <find_volume+0x364>
 8005298:	230d      	movs	r3, #13
 800529a:	e08e      	b.n	80053ba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800529c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a2:	441a      	add	r2, r3
 80052a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80052a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d103      	bne.n	80052b8 <find_volume+0x380>
 80052b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	e00a      	b.n	80052ce <find_volume+0x396>
 80052b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	085a      	lsrs	r2, r3, #1
 80052c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80052ce:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80052d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d2:	699a      	ldr	r2, [r3, #24]
 80052d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052d6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80052da:	0a5b      	lsrs	r3, r3, #9
 80052dc:	429a      	cmp	r2, r3
 80052de:	d201      	bcs.n	80052e4 <find_volume+0x3ac>
 80052e0:	230d      	movs	r3, #13
 80052e2:	e06a      	b.n	80053ba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80052e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ea:	611a      	str	r2, [r3, #16]
 80052ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80052f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f6:	2280      	movs	r2, #128	@ 0x80
 80052f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80052fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d149      	bne.n	8005396 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005304:	3330      	adds	r3, #48	@ 0x30
 8005306:	3330      	adds	r3, #48	@ 0x30
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe fbfb 	bl	8003b04 <ld_word>
 800530e:	4603      	mov	r3, r0
 8005310:	2b01      	cmp	r3, #1
 8005312:	d140      	bne.n	8005396 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005316:	3301      	adds	r3, #1
 8005318:	4619      	mov	r1, r3
 800531a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800531c:	f7fe fea2 	bl	8004064 <move_window>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d137      	bne.n	8005396 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005328:	2200      	movs	r2, #0
 800532a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532e:	3330      	adds	r3, #48	@ 0x30
 8005330:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fbe5 	bl	8003b04 <ld_word>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005342:	429a      	cmp	r2, r3
 8005344:	d127      	bne.n	8005396 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	3330      	adds	r3, #48	@ 0x30
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fbf2 	bl	8003b34 <ld_dword>
 8005350:	4603      	mov	r3, r0
 8005352:	4a1c      	ldr	r2, [pc, #112]	@ (80053c4 <find_volume+0x48c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d11e      	bne.n	8005396 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535a:	3330      	adds	r3, #48	@ 0x30
 800535c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005360:	4618      	mov	r0, r3
 8005362:	f7fe fbe7 	bl	8003b34 <ld_dword>
 8005366:	4603      	mov	r3, r0
 8005368:	4a17      	ldr	r2, [pc, #92]	@ (80053c8 <find_volume+0x490>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d113      	bne.n	8005396 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	3330      	adds	r3, #48	@ 0x30
 8005372:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fbdc 	bl	8003b34 <ld_dword>
 800537c:	4602      	mov	r2, r0
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005384:	3330      	adds	r3, #48	@ 0x30
 8005386:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fbd2 	bl	8003b34 <ld_dword>
 8005390:	4602      	mov	r2, r0
 8005392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005394:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800539c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800539e:	4b0b      	ldr	r3, [pc, #44]	@ (80053cc <find_volume+0x494>)
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	4b09      	ldr	r3, [pc, #36]	@ (80053cc <find_volume+0x494>)
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <find_volume+0x494>)
 80053ac:	881a      	ldrh	r2, [r3, #0]
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80053b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80053b4:	f7fe fdee 	bl	8003f94 <clear_lock>
#endif
	return FR_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3758      	adds	r7, #88	@ 0x58
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	41615252 	.word	0x41615252
 80053c8:	61417272 	.word	0x61417272
 80053cc:	20000528 	.word	0x20000528

080053d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80053da:	2309      	movs	r3, #9
 80053dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01c      	beq.n	800541e <validate+0x4e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d018      	beq.n	800541e <validate+0x4e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d013      	beq.n	800541e <validate+0x4e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	889a      	ldrh	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	88db      	ldrh	r3, [r3, #6]
 8005400:	429a      	cmp	r2, r3
 8005402:	d10c      	bne.n	800541e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	785b      	ldrb	r3, [r3, #1]
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fada 	bl	80039c4 <disk_status>
 8005410:	4603      	mov	r3, r0
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <validate+0x4e>
			res = FR_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d102      	bne.n	800542a <validate+0x5a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	e000      	b.n	800542c <validate+0x5c>
 800542a:	2300      	movs	r3, #0
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	6013      	str	r3, [r2, #0]
	return res;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800544e:	f107 0310 	add.w	r3, r7, #16
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fcd5 	bl	8004e02 <get_ldnumber>
 8005458:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	da01      	bge.n	8005464 <f_mount+0x28>
 8005460:	230b      	movs	r3, #11
 8005462:	e02b      	b.n	80054bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005464:	4a17      	ldr	r2, [pc, #92]	@ (80054c4 <f_mount+0x88>)
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005474:	69b8      	ldr	r0, [r7, #24]
 8005476:	f7fe fd8d 	bl	8003f94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	490d      	ldr	r1, [pc, #52]	@ (80054c4 <f_mount+0x88>)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <f_mount+0x66>
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <f_mount+0x6a>
 80054a2:	2300      	movs	r3, #0
 80054a4:	e00a      	b.n	80054bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80054a6:	f107 010c 	add.w	r1, r7, #12
 80054aa:	f107 0308 	add.w	r3, r7, #8
 80054ae:	2200      	movs	r2, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fd41 	bl	8004f38 <find_volume>
 80054b6:	4603      	mov	r3, r0
 80054b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3720      	adds	r7, #32
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000524 	.word	0x20000524

080054c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b098      	sub	sp, #96	@ 0x60
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	4613      	mov	r3, r2
 80054d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <f_open+0x18>
 80054dc:	2309      	movs	r3, #9
 80054de:	e1a9      	b.n	8005834 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80054e8:	79fa      	ldrb	r2, [r7, #7]
 80054ea:	f107 0110 	add.w	r1, r7, #16
 80054ee:	f107 0308 	add.w	r3, r7, #8
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff fd20 	bl	8004f38 <find_volume>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80054fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 818d 	bne.w	8005822 <f_open+0x35a>
		dj.obj.fs = fs;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	f107 0314 	add.w	r3, r7, #20
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fc03 	bl	8004d20 <follow_path>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005520:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005524:	2b00      	cmp	r3, #0
 8005526:	d118      	bne.n	800555a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005528:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800552c:	b25b      	sxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	da03      	bge.n	800553a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005532:	2306      	movs	r3, #6
 8005534:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005538:	e00f      	b.n	800555a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	2b01      	cmp	r3, #1
 800553e:	bf8c      	ite	hi
 8005540:	2301      	movhi	r3, #1
 8005542:	2300      	movls	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	f107 0314 	add.w	r3, r7, #20
 800554c:	4611      	mov	r1, r2
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fbd8 	bl	8003d04 <chk_lock>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	f003 031c 	and.w	r3, r3, #28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d07f      	beq.n	8005664 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005564:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005568:	2b00      	cmp	r3, #0
 800556a:	d017      	beq.n	800559c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800556c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005570:	2b04      	cmp	r3, #4
 8005572:	d10e      	bne.n	8005592 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005574:	f7fe fc22 	bl	8003dbc <enq_lock>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <f_open+0xc4>
 800557e:	f107 0314 	add.w	r3, r7, #20
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fb06 	bl	8004b94 <dir_register>
 8005588:	4603      	mov	r3, r0
 800558a:	e000      	b.n	800558e <f_open+0xc6>
 800558c:	2312      	movs	r3, #18
 800558e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	f043 0308 	orr.w	r3, r3, #8
 8005598:	71fb      	strb	r3, [r7, #7]
 800559a:	e010      	b.n	80055be <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800559c:	7ebb      	ldrb	r3, [r7, #26]
 800559e:	f003 0311 	and.w	r3, r3, #17
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <f_open+0xe6>
					res = FR_DENIED;
 80055a6:	2307      	movs	r3, #7
 80055a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80055ac:	e007      	b.n	80055be <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <f_open+0xf6>
 80055b8:	2308      	movs	r3, #8
 80055ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80055be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d168      	bne.n	8005698 <f_open+0x1d0>
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d063      	beq.n	8005698 <f_open+0x1d0>
				dw = GET_FATTIME();
 80055d0:	f7fd ffd0 	bl	8003574 <get_fattime>
 80055d4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80055d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d8:	330e      	adds	r3, #14
 80055da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fe fae7 	bl	8003bb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80055e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e4:	3316      	adds	r3, #22
 80055e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe fae1 	bl	8003bb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80055ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f0:	330b      	adds	r3, #11
 80055f2:	2220      	movs	r2, #32
 80055f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055fa:	4611      	mov	r1, r2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fa35 	bl	8004a6c <ld_clust>
 8005602:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005608:	2200      	movs	r2, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fa4d 	bl	8004aaa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005612:	331c      	adds	r3, #28
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe faca 	bl	8003bb0 <st_dword>
					fs->wflag = 1;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2201      	movs	r2, #1
 8005620:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d037      	beq.n	8005698 <f_open+0x1d0>
						dw = fs->winsect;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800562e:	f107 0314 	add.w	r3, r7, #20
 8005632:	2200      	movs	r2, #0
 8005634:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe ff60 	bl	80044fc <remove_chain>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005642:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005646:	2b00      	cmp	r3, #0
 8005648:	d126      	bne.n	8005698 <f_open+0x1d0>
							res = move_window(fs, dw);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fd08 	bl	8004064 <move_window>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800565e:	3a01      	subs	r2, #1
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	e019      	b.n	8005698 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005664:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005668:	2b00      	cmp	r3, #0
 800566a:	d115      	bne.n	8005698 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800566c:	7ebb      	ldrb	r3, [r7, #26]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <f_open+0x1b6>
					res = FR_NO_FILE;
 8005676:	2304      	movs	r3, #4
 8005678:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800567c:	e00c      	b.n	8005698 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <f_open+0x1d0>
 8005688:	7ebb      	ldrb	r3, [r7, #26]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <f_open+0x1d0>
						res = FR_DENIED;
 8005692:	2307      	movs	r3, #7
 8005694:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005698:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800569c:	2b00      	cmp	r3, #0
 800569e:	d126      	bne.n	80056ee <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80056ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	bf8c      	ite	hi
 80056c6:	2301      	movhi	r3, #1
 80056c8:	2300      	movls	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	f107 0314 	add.w	r3, r7, #20
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fb93 	bl	8003e00 <inc_lock>
 80056da:	4602      	mov	r2, r0
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <f_open+0x226>
 80056e8:	2302      	movs	r3, #2
 80056ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80056ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 8095 	bne.w	8005822 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff f9b4 	bl	8004a6c <ld_clust>
 8005704:	4602      	mov	r2, r0
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800570a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570c:	331c      	adds	r3, #28
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fa10 	bl	8003b34 <ld_dword>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	88da      	ldrh	r2, [r3, #6]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	79fa      	ldrb	r2, [r7, #7]
 8005732:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3330      	adds	r3, #48	@ 0x30
 800574a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe fa7a 	bl	8003c4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d060      	beq.n	8005822 <f_open+0x35a>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d05c      	beq.n	8005822 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	895b      	ldrh	r3, [r3, #10]
 8005774:	025b      	lsls	r3, r3, #9
 8005776:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	657b      	str	r3, [r7, #84]	@ 0x54
 8005784:	e016      	b.n	80057b4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe fd25 	bl	80041da <get_fat>
 8005790:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005794:	2b01      	cmp	r3, #1
 8005796:	d802      	bhi.n	800579e <f_open+0x2d6>
 8005798:	2302      	movs	r3, #2
 800579a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800579e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d102      	bne.n	80057ac <f_open+0x2e4>
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80057ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80057b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <f_open+0x2fc>
 80057bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d8e0      	bhi.n	8005786 <f_open+0x2be>
				}
				fp->clust = clst;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80057ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d127      	bne.n	8005822 <f_open+0x35a>
 80057d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d022      	beq.n	8005822 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fcdb 	bl	800419c <clust2sect>
 80057e6:	6478      	str	r0, [r7, #68]	@ 0x44
 80057e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <f_open+0x32e>
						res = FR_INT_ERR;
 80057ee:	2302      	movs	r3, #2
 80057f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80057f4:	e015      	b.n	8005822 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80057f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f8:	0a5a      	lsrs	r2, r3, #9
 80057fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fc:	441a      	add	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	7858      	ldrb	r0, [r3, #1]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	2301      	movs	r3, #1
 8005812:	f7fe f919 	bl	8003a48 <disk_read>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <f_open+0x35a>
 800581c:	2301      	movs	r3, #1
 800581e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005822:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <f_open+0x368>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005830:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8005834:	4618      	mov	r0, r3
 8005836:	3760      	adds	r7, #96	@ 0x60
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	@ 0x30
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f107 0210 	add.w	r2, r7, #16
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff fdb7 	bl	80053d0 <validate>
 8005862:	4603      	mov	r3, r0
 8005864:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005868:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800586c:	2b00      	cmp	r3, #0
 800586e:	d107      	bne.n	8005880 <f_write+0x44>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	7d5b      	ldrb	r3, [r3, #21]
 8005874:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005878:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <f_write+0x4a>
 8005880:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005884:	e14b      	b.n	8005b1e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	7d1b      	ldrb	r3, [r3, #20]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <f_write+0x5a>
 8005892:	2307      	movs	r3, #7
 8005894:	e143      	b.n	8005b1e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	441a      	add	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	f080 812d 	bcs.w	8005b02 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80058b0:	e127      	b.n	8005b02 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f040 80e3 	bne.w	8005a86 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	0a5b      	lsrs	r3, r3, #9
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	8952      	ldrh	r2, [r2, #10]
 80058ca:	3a01      	subs	r2, #1
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d143      	bne.n	800595e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10c      	bne.n	80058f8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d11a      	bne.n	8005920 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2100      	movs	r1, #0
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fe69 	bl	80045c6 <create_chain>
 80058f4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80058f6:	e013      	b.n	8005920 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	4619      	mov	r1, r3
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7fe fef5 	bl	80046f6 <clmt_clust>
 800590c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800590e:	e007      	b.n	8005920 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7fe fe54 	bl	80045c6 <create_chain>
 800591e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80f2 	beq.w	8005b0c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592a:	2b01      	cmp	r3, #1
 800592c:	d104      	bne.n	8005938 <f_write+0xfc>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2202      	movs	r2, #2
 8005932:	755a      	strb	r2, [r3, #21]
 8005934:	2302      	movs	r3, #2
 8005936:	e0f2      	b.n	8005b1e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d104      	bne.n	800594a <f_write+0x10e>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	755a      	strb	r2, [r3, #21]
 8005946:	2301      	movs	r3, #1
 8005948:	e0e9      	b.n	8005b1e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800594e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <f_write+0x122>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800595c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	7d1b      	ldrb	r3, [r3, #20]
 8005962:	b25b      	sxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	da18      	bge.n	800599a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	7858      	ldrb	r0, [r3, #1]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1a      	ldr	r2, [r3, #32]
 8005976:	2301      	movs	r3, #1
 8005978:	f7fe f886 	bl	8003a88 <disk_write>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d004      	beq.n	800598c <f_write+0x150>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	755a      	strb	r2, [r3, #21]
 8005988:	2301      	movs	r3, #1
 800598a:	e0c8      	b.n	8005b1e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	7d1b      	ldrb	r3, [r3, #20]
 8005990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f7fe fbfa 	bl	800419c <clust2sect>
 80059a8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <f_write+0x17e>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2202      	movs	r2, #2
 80059b4:	755a      	strb	r2, [r3, #21]
 80059b6:	2302      	movs	r3, #2
 80059b8:	e0b1      	b.n	8005b1e <f_write+0x2e2>
			sect += csect;
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	4413      	add	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0a5b      	lsrs	r3, r3, #9
 80059c6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d03c      	beq.n	8005a48 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	4413      	add	r3, r2
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	8952      	ldrh	r2, [r2, #10]
 80059d8:	4293      	cmp	r3, r2
 80059da:	d905      	bls.n	80059e8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	895b      	ldrh	r3, [r3, #10]
 80059e0:	461a      	mov	r2, r3
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	7858      	ldrb	r0, [r3, #1]
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	69f9      	ldr	r1, [r7, #28]
 80059f2:	f7fe f849 	bl	8003a88 <disk_write>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <f_write+0x1ca>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	755a      	strb	r2, [r3, #21]
 8005a02:	2301      	movs	r3, #1
 8005a04:	e08b      	b.n	8005b1e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1a      	ldr	r2, [r3, #32]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	6a3a      	ldr	r2, [r7, #32]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d915      	bls.n	8005a40 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1a      	ldr	r2, [r3, #32]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	025b      	lsls	r3, r3, #9
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f7fe f8eb 	bl	8003c08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	7d1b      	ldrb	r3, [r3, #20]
 8005a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	025b      	lsls	r3, r3, #9
 8005a44:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8005a46:	e03f      	b.n	8005ac8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d016      	beq.n	8005a80 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d210      	bcs.n	8005a80 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	7858      	ldrb	r0, [r3, #1]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005a68:	2301      	movs	r3, #1
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	f7fd ffec 	bl	8003a48 <disk_read>
 8005a70:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d004      	beq.n	8005a80 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	755a      	strb	r2, [r3, #21]
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e04e      	b.n	8005b1e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d901      	bls.n	8005aa0 <f_write+0x264>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aae:	4413      	add	r3, r2
 8005ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab2:	69f9      	ldr	r1, [r7, #28]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe f8a7 	bl	8003c08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	7d1b      	ldrb	r3, [r3, #20]
 8005abe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	4413      	add	r3, r2
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	619a      	str	r2, [r3, #24]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	bf38      	it	cc
 8005ae8:	461a      	movcc	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	60da      	str	r2, [r3, #12]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	441a      	add	r2, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f47f aed4 	bne.w	80058b2 <f_write+0x76>
 8005b0a:	e000      	b.n	8005b0e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005b0c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	7d1b      	ldrb	r3, [r3, #20]
 8005b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3730      	adds	r7, #48	@ 0x30
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f107 0208 	add.w	r2, r7, #8
 8005b34:	4611      	mov	r1, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff fc4a 	bl	80053d0 <validate>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d168      	bne.n	8005c18 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	7d1b      	ldrb	r3, [r3, #20]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d062      	beq.n	8005c18 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	7d1b      	ldrb	r3, [r3, #20]
 8005b56:	b25b      	sxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	da15      	bge.n	8005b88 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	7858      	ldrb	r0, [r3, #1]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1a      	ldr	r2, [r3, #32]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f7fd ff8c 	bl	8003a88 <disk_write>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <f_sync+0x54>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e04f      	b.n	8005c1a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	7d1b      	ldrb	r3, [r3, #20]
 8005b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005b88:	f7fd fcf4 	bl	8003574 <get_fattime>
 8005b8c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f7fe fa64 	bl	8004064 <move_window>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d138      	bne.n	8005c18 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005baa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	330b      	adds	r3, #11
 8005bb0:	781a      	ldrb	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	330b      	adds	r3, #11
 8005bb6:	f042 0220 	orr.w	r2, r2, #32
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68f9      	ldr	r1, [r7, #12]
 8005bca:	f7fe ff6e 	bl	8004aaa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f103 021c 	add.w	r2, r3, #28
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7fd ffe8 	bl	8003bb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3316      	adds	r3, #22
 8005be4:	6939      	ldr	r1, [r7, #16]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fd ffe2 	bl	8003bb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3312      	adds	r3, #18
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fd ffc1 	bl	8003b7a <st_word>
					fs->wflag = 1;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe fa5d 	bl	80040c0 <sync_fs>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	7d1b      	ldrb	r3, [r3, #20]
 8005c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff ff7b 	bl	8005b26 <f_sync>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d118      	bne.n	8005c6c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f107 0208 	add.w	r2, r7, #8
 8005c40:	4611      	mov	r1, r2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fbc4 	bl	80053d0 <validate>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10c      	bne.n	8005c6c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe f960 	bl	8003f1c <dec_lock>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005c86:	2301      	movs	r3, #1
 8005c88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d0c <FATFS_LinkDriverEx+0x94>)
 8005c90:	7a5b      	ldrb	r3, [r3, #9]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d131      	bne.n	8005cfc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005c98:	4b1c      	ldr	r3, [pc, #112]	@ (8005d0c <FATFS_LinkDriverEx+0x94>)
 8005c9a:	7a5b      	ldrb	r3, [r3, #9]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d0c <FATFS_LinkDriverEx+0x94>)
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005ca6:	4b19      	ldr	r3, [pc, #100]	@ (8005d0c <FATFS_LinkDriverEx+0x94>)
 8005ca8:	7a5b      	ldrb	r3, [r3, #9]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	4a17      	ldr	r2, [pc, #92]	@ (8005d0c <FATFS_LinkDriverEx+0x94>)
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005cb6:	4b15      	ldr	r3, [pc, #84]	@ (8005d0c <FATFS_LinkDriverEx+0x94>)
 8005cb8:	7a5b      	ldrb	r3, [r3, #9]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4b13      	ldr	r3, [pc, #76]	@ (8005d0c <FATFS_LinkDriverEx+0x94>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	79fa      	ldrb	r2, [r7, #7]
 8005cc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005cc6:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <FATFS_LinkDriverEx+0x94>)
 8005cc8:	7a5b      	ldrb	r3, [r3, #9]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	b2d1      	uxtb	r1, r2
 8005cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8005d0c <FATFS_LinkDriverEx+0x94>)
 8005cd2:	7251      	strb	r1, [r2, #9]
 8005cd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005cd6:	7dbb      	ldrb	r3, [r7, #22]
 8005cd8:	3330      	adds	r3, #48	@ 0x30
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	223a      	movs	r2, #58	@ 0x3a
 8005ce6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	3302      	adds	r3, #2
 8005cec:	222f      	movs	r2, #47	@ 0x2f
 8005cee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	3303      	adds	r3, #3
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	2000054c 	.word	0x2000054c

08005d10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff ffaa 	bl	8005c78 <FATFS_LinkDriverEx>
 8005d24:	4603      	mov	r3, r0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <memset>:
 8005d2e:	4402      	add	r2, r0
 8005d30:	4603      	mov	r3, r0
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d100      	bne.n	8005d38 <memset+0xa>
 8005d36:	4770      	bx	lr
 8005d38:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3c:	e7f9      	b.n	8005d32 <memset+0x4>
	...

08005d40 <__libc_init_array>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	4d0d      	ldr	r5, [pc, #52]	@ (8005d78 <__libc_init_array+0x38>)
 8005d44:	4c0d      	ldr	r4, [pc, #52]	@ (8005d7c <__libc_init_array+0x3c>)
 8005d46:	1b64      	subs	r4, r4, r5
 8005d48:	10a4      	asrs	r4, r4, #2
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	42a6      	cmp	r6, r4
 8005d4e:	d109      	bne.n	8005d64 <__libc_init_array+0x24>
 8005d50:	4d0b      	ldr	r5, [pc, #44]	@ (8005d80 <__libc_init_array+0x40>)
 8005d52:	4c0c      	ldr	r4, [pc, #48]	@ (8005d84 <__libc_init_array+0x44>)
 8005d54:	f000 f818 	bl	8005d88 <_init>
 8005d58:	1b64      	subs	r4, r4, r5
 8005d5a:	10a4      	asrs	r4, r4, #2
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	42a6      	cmp	r6, r4
 8005d60:	d105      	bne.n	8005d6e <__libc_init_array+0x2e>
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d68:	4798      	blx	r3
 8005d6a:	3601      	adds	r6, #1
 8005d6c:	e7ee      	b.n	8005d4c <__libc_init_array+0xc>
 8005d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d72:	4798      	blx	r3
 8005d74:	3601      	adds	r6, #1
 8005d76:	e7f2      	b.n	8005d5e <__libc_init_array+0x1e>
 8005d78:	08005eb8 	.word	0x08005eb8
 8005d7c:	08005eb8 	.word	0x08005eb8
 8005d80:	08005eb8 	.word	0x08005eb8
 8005d84:	08005ebc 	.word	0x08005ebc

08005d88 <_init>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	bf00      	nop
 8005d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8e:	bc08      	pop	{r3}
 8005d90:	469e      	mov	lr, r3
 8005d92:	4770      	bx	lr

08005d94 <_fini>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	bf00      	nop
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr
